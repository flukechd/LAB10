
Week12Spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ecc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800706c  0800706c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072ec  080072ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f4  080072f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080072fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000078  08007374  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08007374  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115fa  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d4  00000000  00000000  000316a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00033a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00034a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018113  00000000  00000000  00035990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111d4  00000000  00000000  0004daa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009be19  00000000  00000000  0005ec77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000faa90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  000faae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007054 	.word	0x08007054

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08007054 	.word	0x08007054

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_frsub>:
 8000a0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a10:	e002      	b.n	8000a18 <__addsf3>
 8000a12:	bf00      	nop

08000a14 <__aeabi_fsub>:
 8000a14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a18 <__addsf3>:
 8000a18:	0042      	lsls	r2, r0, #1
 8000a1a:	bf1f      	itttt	ne
 8000a1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a20:	ea92 0f03 	teqne	r2, r3
 8000a24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2c:	d06a      	beq.n	8000b04 <__addsf3+0xec>
 8000a2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a36:	bfc1      	itttt	gt
 8000a38:	18d2      	addgt	r2, r2, r3
 8000a3a:	4041      	eorgt	r1, r0
 8000a3c:	4048      	eorgt	r0, r1
 8000a3e:	4041      	eorgt	r1, r0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	2b19      	cmp	r3, #25
 8000a46:	bf88      	it	hi
 8000a48:	4770      	bxhi	lr
 8000a4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4249      	negne	r1, r1
 8000a6a:	ea92 0f03 	teq	r2, r3
 8000a6e:	d03f      	beq.n	8000af0 <__addsf3+0xd8>
 8000a70:	f1a2 0201 	sub.w	r2, r2, #1
 8000a74:	fa41 fc03 	asr.w	ip, r1, r3
 8000a78:	eb10 000c 	adds.w	r0, r0, ip
 8000a7c:	f1c3 0320 	rsb	r3, r3, #32
 8000a80:	fa01 f103 	lsl.w	r1, r1, r3
 8000a84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a88:	d502      	bpl.n	8000a90 <__addsf3+0x78>
 8000a8a:	4249      	negs	r1, r1
 8000a8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a94:	d313      	bcc.n	8000abe <__addsf3+0xa6>
 8000a96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a9a:	d306      	bcc.n	8000aaa <__addsf3+0x92>
 8000a9c:	0840      	lsrs	r0, r0, #1
 8000a9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aa2:	f102 0201 	add.w	r2, r2, #1
 8000aa6:	2afe      	cmp	r2, #254	; 0xfe
 8000aa8:	d251      	bcs.n	8000b4e <__addsf3+0x136>
 8000aaa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ab2:	bf08      	it	eq
 8000ab4:	f020 0001 	biceq.w	r0, r0, #1
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	4770      	bx	lr
 8000abe:	0049      	lsls	r1, r1, #1
 8000ac0:	eb40 0000 	adc.w	r0, r0, r0
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000acc:	d2ed      	bcs.n	8000aaa <__addsf3+0x92>
 8000ace:	fab0 fc80 	clz	ip, r0
 8000ad2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ad6:	ebb2 020c 	subs.w	r2, r2, ip
 8000ada:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ade:	bfaa      	itet	ge
 8000ae0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ae4:	4252      	neglt	r2, r2
 8000ae6:	4318      	orrge	r0, r3
 8000ae8:	bfbc      	itt	lt
 8000aea:	40d0      	lsrlt	r0, r2
 8000aec:	4318      	orrlt	r0, r3
 8000aee:	4770      	bx	lr
 8000af0:	f092 0f00 	teq	r2, #0
 8000af4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af8:	bf06      	itte	eq
 8000afa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000afe:	3201      	addeq	r2, #1
 8000b00:	3b01      	subne	r3, #1
 8000b02:	e7b5      	b.n	8000a70 <__addsf3+0x58>
 8000b04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b12:	d021      	beq.n	8000b58 <__addsf3+0x140>
 8000b14:	ea92 0f03 	teq	r2, r3
 8000b18:	d004      	beq.n	8000b24 <__addsf3+0x10c>
 8000b1a:	f092 0f00 	teq	r2, #0
 8000b1e:	bf08      	it	eq
 8000b20:	4608      	moveq	r0, r1
 8000b22:	4770      	bx	lr
 8000b24:	ea90 0f01 	teq	r0, r1
 8000b28:	bf1c      	itt	ne
 8000b2a:	2000      	movne	r0, #0
 8000b2c:	4770      	bxne	lr
 8000b2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b32:	d104      	bne.n	8000b3e <__addsf3+0x126>
 8000b34:	0040      	lsls	r0, r0, #1
 8000b36:	bf28      	it	cs
 8000b38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	4770      	bx	lr
 8000b3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b42:	bf3c      	itt	cc
 8000b44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bxcc	lr
 8000b4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b5c:	bf16      	itet	ne
 8000b5e:	4608      	movne	r0, r1
 8000b60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b64:	4601      	movne	r1, r0
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	bf06      	itte	eq
 8000b6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b6e:	ea90 0f01 	teqeq	r0, r1
 8000b72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_ui2f>:
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	e004      	b.n	8000b88 <__aeabi_i2f+0x8>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_i2f>:
 8000b80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	bf48      	it	mi
 8000b86:	4240      	negmi	r0, r0
 8000b88:	ea5f 0c00 	movs.w	ip, r0
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b94:	4601      	mov	r1, r0
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	e01c      	b.n	8000bd6 <__aeabi_l2f+0x2a>

08000b9c <__aeabi_ul2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	e00a      	b.n	8000bc0 <__aeabi_l2f+0x14>
 8000baa:	bf00      	nop

08000bac <__aeabi_l2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__aeabi_l2f+0x14>
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	ea5f 0c01 	movs.w	ip, r1
 8000bc4:	bf02      	ittt	eq
 8000bc6:	4684      	moveq	ip, r0
 8000bc8:	4601      	moveq	r1, r0
 8000bca:	2000      	moveq	r0, #0
 8000bcc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bda:	fabc f28c 	clz	r2, ip
 8000bde:	3a08      	subs	r2, #8
 8000be0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000be4:	db10      	blt.n	8000c08 <__aeabi_l2f+0x5c>
 8000be6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bea:	4463      	add	r3, ip
 8000bec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f102 0220 	add.w	r2, r2, #32
 8000c0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c18:	fa21 f202 	lsr.w	r2, r1, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b98e 	b.w	8000f5c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f826 	bl	8000c98 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_f2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	f7ff fda7 	bl	80007ac <__aeabi_f2d>
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__aeabi_f2ulz+0x38>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	4606      	mov	r6, r0
 8000c64:	460f      	mov	r7, r1
 8000c66:	f7ff fb13 	bl	8000290 <__aeabi_dmul>
 8000c6a:	f000 f979 	bl	8000f60 <__aeabi_d2uiz>
 8000c6e:	4604      	mov	r4, r0
 8000c70:	f7ff fd7a 	bl	8000768 <__aeabi_ui2d>
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <__aeabi_f2ulz+0x3c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	f7ff fb0a 	bl	8000290 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4630      	mov	r0, r6
 8000c82:	4639      	mov	r1, r7
 8000c84:	f7ff fc32 	bl	80004ec <__aeabi_dsub>
 8000c88:	f000 f96a 	bl	8000f60 <__aeabi_d2uiz>
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c90:	3df00000 	.word	0x3df00000
 8000c94:	41f00000 	.word	0x41f00000

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <__aeabi_d2uiz>:
 8000f60:	004a      	lsls	r2, r1, #1
 8000f62:	d211      	bcs.n	8000f88 <__aeabi_d2uiz+0x28>
 8000f64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f68:	d211      	bcs.n	8000f8e <__aeabi_d2uiz+0x2e>
 8000f6a:	d50d      	bpl.n	8000f88 <__aeabi_d2uiz+0x28>
 8000f6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f74:	d40e      	bmi.n	8000f94 <__aeabi_d2uiz+0x34>
 8000f76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f82:	fa23 f002 	lsr.w	r0, r3, r2
 8000f86:	4770      	bx	lr
 8000f88:	f04f 0000 	mov.w	r0, #0
 8000f8c:	4770      	bx	lr
 8000f8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f92:	d102      	bne.n	8000f9a <__aeabi_d2uiz+0x3a>
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0000 	mov.w	r0, #0
 8000f9e:	4770      	bx	lr

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fa4:	b0b6      	sub	sp, #216	; 0xd8
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f001 fc22 	bl	80027f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 fea6 	bl	8001cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f001 f850 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb4:	f001 f82e 	bl	8002014 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb8:	f001 f802 	bl	8001fc0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000fbc:	f000 ff58 	bl	8001e70 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000fc0:	f000 ff04 	bl	8001dcc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fc4:	f000 ff8c 	bl	8001ee0 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000fc8:	f000 ffd6 	bl	8001f78 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000fcc:	48c2      	ldr	r0, [pc, #776]	; (80012d8 <main+0x338>)
 8000fce:	f004 f92d 	bl	800522c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000fd2:	48c2      	ldr	r0, [pc, #776]	; (80012dc <main+0x33c>)
 8000fd4:	f004 f984 	bl	80052e0 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	49c1      	ldr	r1, [pc, #772]	; (80012e0 <main+0x340>)
 8000fdc:	48c1      	ldr	r0, [pc, #772]	; (80012e4 <main+0x344>)
 8000fde:	f001 fdfd 	bl	8002bdc <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe8:	48bf      	ldr	r0, [pc, #764]	; (80012e8 <main+0x348>)
 8000fea:	f003 f879 	bl	80040e0 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8000fee:	2220      	movs	r2, #32
 8000ff0:	49be      	ldr	r1, [pc, #760]	; (80012ec <main+0x34c>)
 8000ff2:	48bf      	ldr	r0, [pc, #764]	; (80012f0 <main+0x350>)
 8000ff4:	f004 fe45 	bl	8005c82 <HAL_UART_Receive_IT>
				int16_t inputchar = UARTRecieveIT();
 8000ff8:	f001 f8d4 	bl	80021a4 <UARTRecieveIT>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
				if(inputchar!=-1)
 8001002:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800100a:	d011      	beq.n	8001030 <main+0x90>
				{
					sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 800100c:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 8001010:	461a      	mov	r2, r3
 8001012:	49b8      	ldr	r1, [pc, #736]	; (80012f4 <main+0x354>)
 8001014:	48b8      	ldr	r0, [pc, #736]	; (80012f8 <main+0x358>)
 8001016:	f005 fbfd 	bl	8006814 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 800101a:	48b7      	ldr	r0, [pc, #732]	; (80012f8 <main+0x358>)
 800101c:	f7ff f8e0 	bl	80001e0 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001028:	49b3      	ldr	r1, [pc, #716]	; (80012f8 <main+0x358>)
 800102a:	48b1      	ldr	r0, [pc, #708]	; (80012f0 <main+0x350>)
 800102c:	f004 fd97 	bl	8005b5e <HAL_UART_Transmit>
				}
				 switch (STATE_Display)
 8001030:	4bb2      	ldr	r3, [pc, #712]	; (80012fc <main+0x35c>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	2b29      	cmp	r3, #41	; 0x29
 8001036:	f200 8532 	bhi.w	8001a9e <main+0xafe>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <main+0xa0>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	080010e9 	.word	0x080010e9
 8001044:	08001a9f 	.word	0x08001a9f
 8001048:	08001a9f 	.word	0x08001a9f
 800104c:	08001a9f 	.word	0x08001a9f
 8001050:	08001a9f 	.word	0x08001a9f
 8001054:	08001a9f 	.word	0x08001a9f
 8001058:	08001a9f 	.word	0x08001a9f
 800105c:	08001a9f 	.word	0x08001a9f
 8001060:	08001a9f 	.word	0x08001a9f
 8001064:	08001a9f 	.word	0x08001a9f
 8001068:	080010f3 	.word	0x080010f3
 800106c:	08001129 	.word	0x08001129
 8001070:	08001a9f 	.word	0x08001a9f
 8001074:	08001a9f 	.word	0x08001a9f
 8001078:	08001a9f 	.word	0x08001a9f
 800107c:	08001a9f 	.word	0x08001a9f
 8001080:	08001a9f 	.word	0x08001a9f
 8001084:	08001a9f 	.word	0x08001a9f
 8001088:	08001a9f 	.word	0x08001a9f
 800108c:	08001a9f 	.word	0x08001a9f
 8001090:	0800119f 	.word	0x0800119f
 8001094:	080011e3 	.word	0x080011e3
 8001098:	08001a9f 	.word	0x08001a9f
 800109c:	08001a9f 	.word	0x08001a9f
 80010a0:	08001a9f 	.word	0x08001a9f
 80010a4:	08001a9f 	.word	0x08001a9f
 80010a8:	08001a9f 	.word	0x08001a9f
 80010ac:	08001a9f 	.word	0x08001a9f
 80010b0:	08001a9f 	.word	0x08001a9f
 80010b4:	08001a9f 	.word	0x08001a9f
 80010b8:	08001a9f 	.word	0x08001a9f
 80010bc:	08001a9f 	.word	0x08001a9f
 80010c0:	08001a9f 	.word	0x08001a9f
 80010c4:	08001a9f 	.word	0x08001a9f
 80010c8:	08001a9f 	.word	0x08001a9f
 80010cc:	08001a9f 	.word	0x08001a9f
 80010d0:	08001a9f 	.word	0x08001a9f
 80010d4:	08001a9f 	.word	0x08001a9f
 80010d8:	08001a9f 	.word	0x08001a9f
 80010dc:	08001a9f 	.word	0x08001a9f
 80010e0:	08001569 	.word	0x08001569
 80010e4:	08001629 	.word	0x08001629
					    {
					    case StateDisplay_Start:
					      STATE_Display = StateDisplay_MenuRoot_Print;
 80010e8:	4b84      	ldr	r3, [pc, #528]	; (80012fc <main+0x35c>)
 80010ea:	220a      	movs	r2, #10
 80010ec:	801a      	strh	r2, [r3, #0]
					      break;
 80010ee:	f000 bcd6 	b.w	8001a9e <main+0xafe>
					    case StateDisplay_MenuRoot_Print:
					    	{
					      char temp[]=" Menu\r\n 1.Sawtooth Control\r\n 2.Sine Wave Control\r\n 3.Square Wave Control\r\n";
 80010f2:	4a83      	ldr	r2, [pc, #524]	; (8001300 <main+0x360>)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4611      	mov	r1, r2
 80010fa:	224b      	movs	r2, #75	; 0x4b
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fb73 	bl	80067e8 <memcpy>
					      HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f86a 	bl	80001e0 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	f107 010c 	add.w	r1, r7, #12
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	4875      	ldr	r0, [pc, #468]	; (80012f0 <main+0x350>)
 800111a:	f004 fd20 	bl	8005b5e <HAL_UART_Transmit>
					    	}
					          STATE_Display = StateDisplay_MenuRoot_WaitInput;
 800111e:	4b77      	ldr	r3, [pc, #476]	; (80012fc <main+0x35c>)
 8001120:	220b      	movs	r2, #11
 8001122:	801a      	strh	r2, [r3, #0]
					          break;
 8001124:	f000 bcbb 	b.w	8001a9e <main+0xafe>

					        case StateDisplay_MenuRoot_WaitInput:
					          switch (inputchar)
 8001128:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 800112c:	2b33      	cmp	r3, #51	; 0x33
 800112e:	d012      	beq.n	8001156 <main+0x1b6>
 8001130:	2b33      	cmp	r3, #51	; 0x33
 8001132:	dc14      	bgt.n	800115e <main+0x1be>
 8001134:	2b32      	cmp	r3, #50	; 0x32
 8001136:	d00a      	beq.n	800114e <main+0x1ae>
 8001138:	2b32      	cmp	r3, #50	; 0x32
 800113a:	dc10      	bgt.n	800115e <main+0x1be>
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d02a      	beq.n	8001198 <main+0x1f8>
 8001142:	2b31      	cmp	r3, #49	; 0x31
 8001144:	d10b      	bne.n	800115e <main+0x1be>
					          {
					          case -1:
					            break;
					          case '1':
					            STATE_Display = StateDisplay_Menu1_Print;
 8001146:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <main+0x35c>)
 8001148:	2214      	movs	r2, #20
 800114a:	801a      	strh	r2, [r3, #0]
					            break;
 800114c:	e025      	b.n	800119a <main+0x1fa>
					          case '2':
					          	STATE_Display = StateDisplay_Menu2_Print;
 800114e:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <main+0x35c>)
 8001150:	221e      	movs	r2, #30
 8001152:	801a      	strh	r2, [r3, #0]
					          	break;
 8001154:	e021      	b.n	800119a <main+0x1fa>
					          case '3':
					          	STATE_Display = StateDisplay_Menu3_Print;
 8001156:	4b69      	ldr	r3, [pc, #420]	; (80012fc <main+0x35c>)
 8001158:	2228      	movs	r2, #40	; 0x28
 800115a:	801a      	strh	r2, [r3, #0]
					          	break;
 800115c:	e01d      	b.n	800119a <main+0x1fa>
					          default:
					          {
					         	char temp[]="You pressed the wrong button, please try again.\r\n";
 800115e:	4b69      	ldr	r3, [pc, #420]	; (8001304 <main+0x364>)
 8001160:	f107 040c 	add.w	r4, r7, #12
 8001164:	461d      	mov	r5, r3
 8001166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001172:	682b      	ldr	r3, [r5, #0]
 8001174:	8023      	strh	r3, [r4, #0]
					         	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),100);
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f830 	bl	80001e0 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	b29a      	uxth	r2, r3
 8001184:	f107 010c 	add.w	r1, r7, #12
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	4859      	ldr	r0, [pc, #356]	; (80012f0 <main+0x350>)
 800118c:	f004 fce7 	bl	8005b5e <HAL_UART_Transmit>
					          }
					            STATE_Display = StateDisplay_MenuRoot_Print;
 8001190:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <main+0x35c>)
 8001192:	220a      	movs	r2, #10
 8001194:	801a      	strh	r2, [r3, #0]
					            break;
 8001196:	e000      	b.n	800119a <main+0x1fa>
					            break;
 8001198:	bf00      	nop
					          }
					          break;
 800119a:	f000 bc80 	b.w	8001a9e <main+0xafe>
					   case StateDisplay_Menu1_Print:
					       switch (inputchar)
 800119e:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80011a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a6:	f040 8479 	bne.w	8001a9c <main+0xafc>
					       {
					           case -1:
					           {
					            char temp[]="Menu Sawtooth Control\r\n a.Freq+0.1Hz\r\n s.Freq-0.1Hz \r\n d.Vmax+0.1V \r\n f.Vmax-0.1V \r\n g.Vmin+0.1V \r\n h.Vmin-0.1V \r\n j.Slope Up \r\n k.Slope Down \r\n x.Back \r\n";
 80011aa:	4a57      	ldr	r2, [pc, #348]	; (8001308 <main+0x368>)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4611      	mov	r1, r2
 80011b2:	229b      	movs	r2, #155	; 0x9b
 80011b4:	4618      	mov	r0, r3
 80011b6:	f005 fb17 	bl	80067e8 <memcpy>
					          	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f80e 	bl	80001e0 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f107 010c 	add.w	r1, r7, #12
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	4847      	ldr	r0, [pc, #284]	; (80012f0 <main+0x350>)
 80011d2:	f004 fcc4 	bl	8005b5e <HAL_UART_Transmit>
					           }
					          	STATE_Display = StateDisplay_Menu1_WaitInput;
 80011d6:	4b49      	ldr	r3, [pc, #292]	; (80012fc <main+0x35c>)
 80011d8:	2215      	movs	r2, #21
 80011da:	801a      	strh	r2, [r3, #0]
					          	break;
 80011dc:	bf00      	nop
//					          	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
//					          	}
//					          	STATE_Display = StateDisplay_Menu1_Print;
//					          	break;
					       }
					        break;
 80011de:	f000 bc5d 	b.w	8001a9c <main+0xafc>
					   case StateDisplay_Menu1_WaitInput:
					      	switch (inputchar)
 80011e2:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 80011e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ea:	f000 81bb 	beq.w	8001564 <main+0x5c4>
 80011ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f2:	f2c0 8199 	blt.w	8001528 <main+0x588>
 80011f6:	2b78      	cmp	r3, #120	; 0x78
 80011f8:	f300 8196 	bgt.w	8001528 <main+0x588>
 80011fc:	2b61      	cmp	r3, #97	; 0x61
 80011fe:	f2c0 8193 	blt.w	8001528 <main+0x588>
 8001202:	3b61      	subs	r3, #97	; 0x61
 8001204:	2b17      	cmp	r3, #23
 8001206:	f200 818f 	bhi.w	8001528 <main+0x588>
 800120a:	a201      	add	r2, pc, #4	; (adr r2, 8001210 <main+0x270>)
 800120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001210:	08001279 	.word	0x08001279
 8001214:	08001529 	.word	0x08001529
 8001218:	08001529 	.word	0x08001529
 800121c:	0800136d 	.word	0x0800136d
 8001220:	08001529 	.word	0x08001529
 8001224:	080013c1 	.word	0x080013c1
 8001228:	08001415 	.word	0x08001415
 800122c:	08001469 	.word	0x08001469
 8001230:	08001529 	.word	0x08001529
 8001234:	080014bd 	.word	0x080014bd
 8001238:	080014f3 	.word	0x080014f3
 800123c:	08001529 	.word	0x08001529
 8001240:	08001529 	.word	0x08001529
 8001244:	08001529 	.word	0x08001529
 8001248:	08001529 	.word	0x08001529
 800124c:	08001529 	.word	0x08001529
 8001250:	08001529 	.word	0x08001529
 8001254:	08001529 	.word	0x08001529
 8001258:	08001319 	.word	0x08001319
 800125c:	08001529 	.word	0x08001529
 8001260:	08001529 	.word	0x08001529
 8001264:	08001529 	.word	0x08001529
 8001268:	08001529 	.word	0x08001529
 800126c:	08001271 	.word	0x08001271
					      	{
					      	    case -1:
					      	    break;
					      	    case 'x':

					      	     STATE_Display = StateDisplay_MenuRoot_Print;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <main+0x35c>)
 8001272:	220a      	movs	r2, #10
 8001274:	801a      	strh	r2, [r3, #0]
					      	    break;
 8001276:	e176      	b.n	8001566 <main+0x5c6>
					      	    case 'a':
					      	    	f+=0.1;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <main+0x36c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fa95 	bl	80007ac <__aeabi_f2d>
 8001282:	a313      	add	r3, pc, #76	; (adr r3, 80012d0 <main+0x330>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f932 	bl	80004f0 <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fb6a 	bl	800096c <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <main+0x36c>)
 800129c:	6013      	str	r3, [r2, #0]
					      	    	sprintf(KxDataBuffer, "Freq=%dHz \r\n", f);
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <main+0x36c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fa82 	bl	80007ac <__aeabi_f2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4918      	ldr	r1, [pc, #96]	; (8001310 <main+0x370>)
 80012ae:	4819      	ldr	r0, [pc, #100]	; (8001314 <main+0x374>)
 80012b0:	f005 fab0 	bl	8006814 <siprintf>
					      	    	HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <main+0x374>)
 80012b6:	f7fe ff93 	bl	80001e0 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	4914      	ldr	r1, [pc, #80]	; (8001314 <main+0x374>)
 80012c4:	480a      	ldr	r0, [pc, #40]	; (80012f0 <main+0x350>)
 80012c6:	f004 fc4a 	bl	8005b5e <HAL_UART_Transmit>
					      	     break;
 80012ca:	e14c      	b.n	8001566 <main+0x5c6>
 80012cc:	f3af 8000 	nop.w
 80012d0:	9999999a 	.word	0x9999999a
 80012d4:	3fb99999 	.word	0x3fb99999
 80012d8:	20000140 	.word	0x20000140
 80012dc:	20000228 	.word	0x20000228
 80012e0:	200000f6 	.word	0x200000f6
 80012e4:	200001e0 	.word	0x200001e0
 80012e8:	40020000 	.word	0x40020000
 80012ec:	200000d4 	.word	0x200000d4
 80012f0:	200002d0 	.word	0x200002d0
 80012f4:	0800706c 	.word	0x0800706c
 80012f8:	20000094 	.word	0x20000094
 80012fc:	200000f4 	.word	0x200000f4
 8001300:	080070a8 	.word	0x080070a8
 8001304:	080070f4 	.word	0x080070f4
 8001308:	08007128 	.word	0x08007128
 800130c:	20000108 	.word	0x20000108
 8001310:	08007080 	.word	0x08007080
 8001314:	200000b4 	.word	0x200000b4
					      	    case 's':
					      	       f-=0.1;
 8001318:	4bb5      	ldr	r3, [pc, #724]	; (80015f0 <main+0x650>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fa45 	bl	80007ac <__aeabi_f2d>
 8001322:	a3b1      	add	r3, pc, #708	; (adr r3, 80015e8 <main+0x648>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f8e0 	bl	80004ec <__aeabi_dsub>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb1a 	bl	800096c <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	4aad      	ldr	r2, [pc, #692]	; (80015f0 <main+0x650>)
 800133c:	6013      	str	r3, [r2, #0]
					      	       sprintf(KxDataBuffer, "Freq=%dHz \r\n", f);
 800133e:	4bac      	ldr	r3, [pc, #688]	; (80015f0 <main+0x650>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fa32 	bl	80007ac <__aeabi_f2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	49a9      	ldr	r1, [pc, #676]	; (80015f4 <main+0x654>)
 800134e:	48aa      	ldr	r0, [pc, #680]	; (80015f8 <main+0x658>)
 8001350:	f005 fa60 	bl	8006814 <siprintf>
					      	       HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 8001354:	48a8      	ldr	r0, [pc, #672]	; (80015f8 <main+0x658>)
 8001356:	f7fe ff43 	bl	80001e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	49a5      	ldr	r1, [pc, #660]	; (80015f8 <main+0x658>)
 8001364:	48a5      	ldr	r0, [pc, #660]	; (80015fc <main+0x65c>)
 8001366:	f004 fbfa 	bl	8005b5e <HAL_UART_Transmit>
					      	    break;
 800136a:	e0fc      	b.n	8001566 <main+0x5c6>
					      	    case 'd':
					      	       Vmax+=0.1;
 800136c:	4ba4      	ldr	r3, [pc, #656]	; (8001600 <main+0x660>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fa1b 	bl	80007ac <__aeabi_f2d>
 8001376:	a39c      	add	r3, pc, #624	; (adr r3, 80015e8 <main+0x648>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff f8b8 	bl	80004f0 <__adddf3>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff faf0 	bl	800096c <__aeabi_d2f>
 800138c:	4603      	mov	r3, r0
 800138e:	4a9c      	ldr	r2, [pc, #624]	; (8001600 <main+0x660>)
 8001390:	6013      	str	r3, [r2, #0]
					      	       sprintf(KxDataBuffer, "Vmax=%dV \r\n", Vmax);
 8001392:	4b9b      	ldr	r3, [pc, #620]	; (8001600 <main+0x660>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fa08 	bl	80007ac <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4998      	ldr	r1, [pc, #608]	; (8001604 <main+0x664>)
 80013a2:	4895      	ldr	r0, [pc, #596]	; (80015f8 <main+0x658>)
 80013a4:	f005 fa36 	bl	8006814 <siprintf>
					      	       HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 80013a8:	4893      	ldr	r0, [pc, #588]	; (80015f8 <main+0x658>)
 80013aa:	f7fe ff19 	bl	80001e0 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	4990      	ldr	r1, [pc, #576]	; (80015f8 <main+0x658>)
 80013b8:	4890      	ldr	r0, [pc, #576]	; (80015fc <main+0x65c>)
 80013ba:	f004 fbd0 	bl	8005b5e <HAL_UART_Transmit>
					      	    break;
 80013be:	e0d2      	b.n	8001566 <main+0x5c6>
					      	    case'f':
					      	    	Vmax-=0.1;
 80013c0:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <main+0x660>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f9f1 	bl	80007ac <__aeabi_f2d>
 80013ca:	a387      	add	r3, pc, #540	; (adr r3, 80015e8 <main+0x648>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff f88c 	bl	80004ec <__aeabi_dsub>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fac6 	bl	800096c <__aeabi_d2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4a87      	ldr	r2, [pc, #540]	; (8001600 <main+0x660>)
 80013e4:	6013      	str	r3, [r2, #0]
					      	    	sprintf(KxDataBuffer, "Vmax=%dV \r\n", Vmax);
 80013e6:	4b86      	ldr	r3, [pc, #536]	; (8001600 <main+0x660>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f9de 	bl	80007ac <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4983      	ldr	r1, [pc, #524]	; (8001604 <main+0x664>)
 80013f6:	4880      	ldr	r0, [pc, #512]	; (80015f8 <main+0x658>)
 80013f8:	f005 fa0c 	bl	8006814 <siprintf>
					      	    	HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 80013fc:	487e      	ldr	r0, [pc, #504]	; (80015f8 <main+0x658>)
 80013fe:	f7fe feef 	bl	80001e0 <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	497b      	ldr	r1, [pc, #492]	; (80015f8 <main+0x658>)
 800140c:	487b      	ldr	r0, [pc, #492]	; (80015fc <main+0x65c>)
 800140e:	f004 fba6 	bl	8005b5e <HAL_UART_Transmit>
					      	    break;
 8001412:	e0a8      	b.n	8001566 <main+0x5c6>
					      	    case'g':
					      	  		Vmin+=0.1;
 8001414:	4b7c      	ldr	r3, [pc, #496]	; (8001608 <main+0x668>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f9c7 	bl	80007ac <__aeabi_f2d>
 800141e:	a372      	add	r3, pc, #456	; (adr r3, 80015e8 <main+0x648>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f864 	bl	80004f0 <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fa9c 	bl	800096c <__aeabi_d2f>
 8001434:	4603      	mov	r3, r0
 8001436:	4a74      	ldr	r2, [pc, #464]	; (8001608 <main+0x668>)
 8001438:	6013      	str	r3, [r2, #0]
					      	  		sprintf(KxDataBuffer, "Vmin=%dV \r\n", Vmin);
 800143a:	4b73      	ldr	r3, [pc, #460]	; (8001608 <main+0x668>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9b4 	bl	80007ac <__aeabi_f2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4970      	ldr	r1, [pc, #448]	; (800160c <main+0x66c>)
 800144a:	486b      	ldr	r0, [pc, #428]	; (80015f8 <main+0x658>)
 800144c:	f005 f9e2 	bl	8006814 <siprintf>
					      	  		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 8001450:	4869      	ldr	r0, [pc, #420]	; (80015f8 <main+0x658>)
 8001452:	f7fe fec5 	bl	80001e0 <strlen>
 8001456:	4603      	mov	r3, r0
 8001458:	b29a      	uxth	r2, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	4966      	ldr	r1, [pc, #408]	; (80015f8 <main+0x658>)
 8001460:	4866      	ldr	r0, [pc, #408]	; (80015fc <main+0x65c>)
 8001462:	f004 fb7c 	bl	8005b5e <HAL_UART_Transmit>
					      	  	break;
 8001466:	e07e      	b.n	8001566 <main+0x5c6>
					      	    case'h':
					      	 		Vmin-=0.1;
 8001468:	4b67      	ldr	r3, [pc, #412]	; (8001608 <main+0x668>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f99d 	bl	80007ac <__aeabi_f2d>
 8001472:	a35d      	add	r3, pc, #372	; (adr r3, 80015e8 <main+0x648>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f838 	bl	80004ec <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fa72 	bl	800096c <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4a5f      	ldr	r2, [pc, #380]	; (8001608 <main+0x668>)
 800148c:	6013      	str	r3, [r2, #0]
					      	 		sprintf(KxDataBuffer, "Vmin=%dV \r\n", Vmin);
 800148e:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <main+0x668>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f98a 	bl	80007ac <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	495b      	ldr	r1, [pc, #364]	; (800160c <main+0x66c>)
 800149e:	4856      	ldr	r0, [pc, #344]	; (80015f8 <main+0x658>)
 80014a0:	f005 f9b8 	bl	8006814 <siprintf>
					      	 		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 80014a4:	4854      	ldr	r0, [pc, #336]	; (80015f8 <main+0x658>)
 80014a6:	f7fe fe9b 	bl	80001e0 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	4951      	ldr	r1, [pc, #324]	; (80015f8 <main+0x658>)
 80014b4:	4851      	ldr	r0, [pc, #324]	; (80015fc <main+0x65c>)
 80014b6:	f004 fb52 	bl	8005b5e <HAL_UART_Transmit>
					      	 	break;
 80014ba:	e054      	b.n	8001566 <main+0x5c6>
					      	    case'j':
					      	    	     x=1;
 80014bc:	4954      	ldr	r1, [pc, #336]	; (8001610 <main+0x670>)
 80014be:	f04f 0201 	mov.w	r2, #1
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c1 2300 	strd	r2, r3, [r1]
					      	              {
					      	  			  char temp[]="Slope Up\r\n ";
 80014ca:	4a52      	ldr	r2, [pc, #328]	; (8001614 <main+0x674>)
 80014cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					      	  			  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80014d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fe80 	bl	80001e0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80014e8:	230a      	movs	r3, #10
 80014ea:	4844      	ldr	r0, [pc, #272]	; (80015fc <main+0x65c>)
 80014ec:	f004 fb37 	bl	8005b5e <HAL_UART_Transmit>
					      	  			  }
					      	 	break;
 80014f0:	e039      	b.n	8001566 <main+0x5c6>
					      	    case'k':
					      	  			 x=2;
 80014f2:	4947      	ldr	r1, [pc, #284]	; (8001610 <main+0x670>)
 80014f4:	f04f 0202 	mov.w	r2, #2
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
					      	  			  {
					      	  			  char temp[]="Slope Down\r\n ";
 8001500:	4b45      	ldr	r3, [pc, #276]	; (8001618 <main+0x678>)
 8001502:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001508:	c407      	stmia	r4!, {r0, r1, r2}
 800150a:	8023      	strh	r3, [r4, #0]
					      	  			  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800150c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe fe65 	bl	80001e0 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800151e:	230a      	movs	r3, #10
 8001520:	4836      	ldr	r0, [pc, #216]	; (80015fc <main+0x65c>)
 8001522:	f004 fb1c 	bl	8005b5e <HAL_UART_Transmit>
					      	  			  }
					      	  	break;
 8001526:	e01e      	b.n	8001566 <main+0x5c6>
					      	    default:
					      	    {
					      	     char temp[]="You pressed the wrong button, please try again.\r\n";
 8001528:	4b3c      	ldr	r3, [pc, #240]	; (800161c <main+0x67c>)
 800152a:	f107 040c 	add.w	r4, r7, #12
 800152e:	461d      	mov	r5, r3
 8001530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153c:	682b      	ldr	r3, [r5, #0]
 800153e:	8023      	strh	r3, [r4, #0]
					      	     HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe4b 	bl	80001e0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	f107 010c 	add.w	r1, r7, #12
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	4829      	ldr	r0, [pc, #164]	; (80015fc <main+0x65c>)
 8001558:	f004 fb01 	bl	8005b5e <HAL_UART_Transmit>
					      	    }
					      	    STATE_Display = StateDisplay_Menu1_Print;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <main+0x680>)
 800155e:	2214      	movs	r2, #20
 8001560:	801a      	strh	r2, [r3, #0]
					      	    break;
 8001562:	e000      	b.n	8001566 <main+0x5c6>
					      	    break;
 8001564:	bf00      	nop
					       }
					       break;
 8001566:	e29a      	b.n	8001a9e <main+0xafe>
//					    STATE_Display = StateDisplay_Menu2_Print;
//					    break;
//					    }
//					    break;
					 case StateDisplay_Menu3_Print: //display one time state
					     switch (inputchar)
 8001568:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d119      	bne.n	80015a6 <main+0x606>
					     {
					    	case -1:
					    	{
					    		char temp[]="Menu Sine Wave Control\r\n a.Freq+0.1Hz\r\n s.Freq-0.1Hz \r\n d.Vmax+0.1V \r\n f.Vmax-0.1V \r\n g.Vmin+0.1V \r\n h.Vmin-0.1V \r\n j.Duty Cycle+10% \r\n k.Duty Cycle-10% \r\n x.Back \r\n";
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <main+0x684>)
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4611      	mov	r1, r2
 800157a:	22a6      	movs	r2, #166	; 0xa6
 800157c:	4618      	mov	r0, r3
 800157e:	f005 f933 	bl	80067e8 <memcpy>
					    	 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe2a 	bl	80001e0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	f107 010c 	add.w	r1, r7, #12
 8001594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001598:	4818      	ldr	r0, [pc, #96]	; (80015fc <main+0x65c>)
 800159a:	f004 fae0 	bl	8005b5e <HAL_UART_Transmit>
					    	}
					    	 STATE_Display = StateDisplay_Menu3_WaitInput;
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <main+0x680>)
 80015a0:	2229      	movs	r2, #41	; 0x29
 80015a2:	801a      	strh	r2, [r3, #0]
					    	 break;
 80015a4:	e01d      	b.n	80015e2 <main+0x642>
					    	default:
					    	{
					    	 char temp[]="You pressed the wrong button, please try again.\r\n";
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <main+0x67c>)
 80015a8:	f107 040c 	add.w	r4, r7, #12
 80015ac:	461d      	mov	r5, r3
 80015ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	8023      	strh	r3, [r4, #0]
					    	 HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe0c 	bl	80001e0 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f107 010c 	add.w	r1, r7, #12
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	4809      	ldr	r0, [pc, #36]	; (80015fc <main+0x65c>)
 80015d6:	f004 fac2 	bl	8005b5e <HAL_UART_Transmit>
					    	}
					    	 STATE_Display = StateDisplay_MenuRoot_Print;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <main+0x680>)
 80015dc:	220a      	movs	r2, #10
 80015de:	801a      	strh	r2, [r3, #0]
					    	 break;
 80015e0:	bf00      	nop
					    }
					    break;
 80015e2:	e25c      	b.n	8001a9e <main+0xafe>
 80015e4:	f3af 8000 	nop.w
 80015e8:	9999999a 	.word	0x9999999a
 80015ec:	3fb99999 	.word	0x3fb99999
 80015f0:	20000108 	.word	0x20000108
 80015f4:	08007080 	.word	0x08007080
 80015f8:	200000b4 	.word	0x200000b4
 80015fc:	200002d0 	.word	0x200002d0
 8001600:	20000004 	.word	0x20000004
 8001604:	08007090 	.word	0x08007090
 8001608:	20000104 	.word	0x20000104
 800160c:	0800709c 	.word	0x0800709c
 8001610:	20000110 	.word	0x20000110
 8001614:	080071c4 	.word	0x080071c4
 8001618:	080071d0 	.word	0x080071d0
 800161c:	080070f4 	.word	0x080070f4
 8001620:	200000f4 	.word	0x200000f4
 8001624:	080071e0 	.word	0x080071e0
					 case StateDisplay_Menu3_WaitInput:
					     switch (inputchar)
 8001628:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d040      	beq.n	80016b4 <main+0x714>
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001636:	f2c0 81fd 	blt.w	8001a34 <main+0xa94>
 800163a:	2b78      	cmp	r3, #120	; 0x78
 800163c:	f300 81fa 	bgt.w	8001a34 <main+0xa94>
 8001640:	2b61      	cmp	r3, #97	; 0x61
 8001642:	f2c0 81f7 	blt.w	8001a34 <main+0xa94>
 8001646:	3b61      	subs	r3, #97	; 0x61
 8001648:	2b17      	cmp	r3, #23
 800164a:	f200 81f3 	bhi.w	8001a34 <main+0xa94>
 800164e:	a201      	add	r2, pc, #4	; (adr r2, 8001654 <main+0x6b4>)
 8001650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001654:	080017ab 	.word	0x080017ab
 8001658:	08001a35 	.word	0x08001a35
 800165c:	08001a35 	.word	0x08001a35
 8001660:	08001853 	.word	0x08001853
 8001664:	08001a35 	.word	0x08001a35
 8001668:	080018a7 	.word	0x080018a7
 800166c:	080018fb 	.word	0x080018fb
 8001670:	08001991 	.word	0x08001991
 8001674:	08001a35 	.word	0x08001a35
 8001678:	080019e5 	.word	0x080019e5
 800167c:	08001a0d 	.word	0x08001a0d
 8001680:	08001a35 	.word	0x08001a35
 8001684:	08001a35 	.word	0x08001a35
 8001688:	08001a35 	.word	0x08001a35
 800168c:	08001a35 	.word	0x08001a35
 8001690:	08001a35 	.word	0x08001a35
 8001694:	08001a35 	.word	0x08001a35
 8001698:	08001a35 	.word	0x08001a35
 800169c:	080017ff 	.word	0x080017ff
 80016a0:	08001a35 	.word	0x08001a35
 80016a4:	08001a35 	.word	0x08001a35
 80016a8:	08001a35 	.word	0x08001a35
 80016ac:	08001a35 	.word	0x08001a35
 80016b0:	080017a3 	.word	0x080017a3
					     {
					        case -1:
					        	t=1/f;
 80016b4:	4ba8      	ldr	r3, [pc, #672]	; (8001958 <main+0x9b8>)
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c2:	4ba6      	ldr	r3, [pc, #664]	; (800195c <main+0x9bc>)
 80016c4:	edc3 7a00 	vstr	s15, [r3]
					        	int x=micros();
 80016c8:	f000 fe16 	bl	80022f8 <micros>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4613      	mov	r3, r2
 80016d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					            tt=x%((uint64_t)t*1000000);
 80016d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80016da:	4619      	mov	r1, r3
 80016dc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80016e0:	e9c7 1200 	strd	r1, r2, [r7]
 80016e4:	4b9d      	ldr	r3, [pc, #628]	; (800195c <main+0x9bc>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fab5 	bl	8000c58 <__aeabi_f2ulz>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	4622      	mov	r2, r4
 80016f4:	462b      	mov	r3, r5
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	0159      	lsls	r1, r3, #5
 8001700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001704:	0150      	lsls	r0, r2, #5
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	1b12      	subs	r2, r2, r4
 800170c:	eb63 0305 	sbc.w	r3, r3, r5
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	0259      	lsls	r1, r3, #9
 800171a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800171e:	0250      	lsls	r0, r2, #9
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	1912      	adds	r2, r2, r4
 8001726:	eb45 0303 	adc.w	r3, r5, r3
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	0199      	lsls	r1, r3, #6
 8001734:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001738:	0190      	lsls	r0, r2, #6
 800173a:	1a80      	subs	r0, r0, r2
 800173c:	eb61 0103 	sbc.w	r1, r1, r3
 8001740:	eb10 0a04 	adds.w	sl, r0, r4
 8001744:	eb41 0b05 	adc.w	fp, r1, r5
 8001748:	4652      	mov	r2, sl
 800174a:	465b      	mov	r3, fp
 800174c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001750:	f7ff fa6a 	bl	8000c28 <__aeabi_uldivmod>
 8001754:	4982      	ldr	r1, [pc, #520]	; (8001960 <main+0x9c0>)
 8001756:	e9c1 2300 	strd	r2, r3, [r1]
					            if(tt>=t*duty*1000000)
 800175a:	4b81      	ldr	r3, [pc, #516]	; (8001960 <main+0x9c0>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	4610      	mov	r0, r2
 8001762:	4619      	mov	r1, r3
 8001764:	f7ff fa1a 	bl	8000b9c <__aeabi_ul2f>
 8001768:	ee06 0a90 	vmov	s13, r0
 800176c:	4b7b      	ldr	r3, [pc, #492]	; (800195c <main+0x9bc>)
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <main+0x9c4>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001968 <main+0x9c8>
 8001780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001784:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	db04      	blt.n	8001798 <main+0x7f8>
					            {
					            	dataOut=Vmin;
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <main+0x9cc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a77      	ldr	r2, [pc, #476]	; (8001970 <main+0x9d0>)
 8001794:	6013      	str	r3, [r2, #0]
					            }
					            else
					            {
					            	dataOut=Vmax;
					            }
					    	break;
 8001796:	e16b      	b.n	8001a70 <main+0xad0>
					            	dataOut=Vmax;
 8001798:	4b76      	ldr	r3, [pc, #472]	; (8001974 <main+0x9d4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a74      	ldr	r2, [pc, #464]	; (8001970 <main+0x9d0>)
 800179e:	6013      	str	r3, [r2, #0]
					    	break;
 80017a0:	e166      	b.n	8001a70 <main+0xad0>
					        case 'x':

					       	STATE_Display = StateDisplay_MenuRoot_Print;
 80017a2:	4b75      	ldr	r3, [pc, #468]	; (8001978 <main+0x9d8>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	801a      	strh	r2, [r3, #0]
					       	break;
 80017a8:	e162      	b.n	8001a70 <main+0xad0>
					       	case 'a':
					       		f+=0.1;
 80017aa:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <main+0x9b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fffc 	bl	80007ac <__aeabi_f2d>
 80017b4:	a366      	add	r3, pc, #408	; (adr r3, 8001950 <main+0x9b0>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe fe99 	bl	80004f0 <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff f8d1 	bl	800096c <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a62      	ldr	r2, [pc, #392]	; (8001958 <main+0x9b8>)
 80017ce:	6013      	str	r3, [r2, #0]
					       		sprintf(KxDataBuffer, "Freq=%dHz \r\n", f);
 80017d0:	4b61      	ldr	r3, [pc, #388]	; (8001958 <main+0x9b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe ffe9 	bl	80007ac <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4967      	ldr	r1, [pc, #412]	; (800197c <main+0x9dc>)
 80017e0:	4867      	ldr	r0, [pc, #412]	; (8001980 <main+0x9e0>)
 80017e2:	f005 f817 	bl	8006814 <siprintf>
					       		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 80017e6:	4866      	ldr	r0, [pc, #408]	; (8001980 <main+0x9e0>)
 80017e8:	f7fe fcfa 	bl	80001e0 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f4:	4962      	ldr	r1, [pc, #392]	; (8001980 <main+0x9e0>)
 80017f6:	4863      	ldr	r0, [pc, #396]	; (8001984 <main+0x9e4>)
 80017f8:	f004 f9b1 	bl	8005b5e <HAL_UART_Transmit>
					       	break;
 80017fc:	e138      	b.n	8001a70 <main+0xad0>
					       	case 's':
					       		f-=0.1;
 80017fe:	4b56      	ldr	r3, [pc, #344]	; (8001958 <main+0x9b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe ffd2 	bl	80007ac <__aeabi_f2d>
 8001808:	a351      	add	r3, pc, #324	; (adr r3, 8001950 <main+0x9b0>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fe6d 	bl	80004ec <__aeabi_dsub>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f8a7 	bl	800096c <__aeabi_d2f>
 800181e:	4603      	mov	r3, r0
 8001820:	4a4d      	ldr	r2, [pc, #308]	; (8001958 <main+0x9b8>)
 8001822:	6013      	str	r3, [r2, #0]
					       		sprintf(KxDataBuffer, "Freq=%dHz \r\n", f);
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <main+0x9b8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe ffbf 	bl	80007ac <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4952      	ldr	r1, [pc, #328]	; (800197c <main+0x9dc>)
 8001834:	4852      	ldr	r0, [pc, #328]	; (8001980 <main+0x9e0>)
 8001836:	f004 ffed 	bl	8006814 <siprintf>
					       		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 800183a:	4851      	ldr	r0, [pc, #324]	; (8001980 <main+0x9e0>)
 800183c:	f7fe fcd0 	bl	80001e0 <strlen>
 8001840:	4603      	mov	r3, r0
 8001842:	b29a      	uxth	r2, r3
 8001844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001848:	494d      	ldr	r1, [pc, #308]	; (8001980 <main+0x9e0>)
 800184a:	484e      	ldr	r0, [pc, #312]	; (8001984 <main+0x9e4>)
 800184c:	f004 f987 	bl	8005b5e <HAL_UART_Transmit>
					       	break;
 8001850:	e10e      	b.n	8001a70 <main+0xad0>
					       	case 'd':
					       		Vmax+=0.1;
 8001852:	4b48      	ldr	r3, [pc, #288]	; (8001974 <main+0x9d4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ffa8 	bl	80007ac <__aeabi_f2d>
 800185c:	a33c      	add	r3, pc, #240	; (adr r3, 8001950 <main+0x9b0>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fe45 	bl	80004f0 <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f87d 	bl	800096c <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	4a3f      	ldr	r2, [pc, #252]	; (8001974 <main+0x9d4>)
 8001876:	6013      	str	r3, [r2, #0]
					       		sprintf(KxDataBuffer, "Vmax=%dV \r\n", Vmax);
 8001878:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <main+0x9d4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe ff95 	bl	80007ac <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4940      	ldr	r1, [pc, #256]	; (8001988 <main+0x9e8>)
 8001888:	483d      	ldr	r0, [pc, #244]	; (8001980 <main+0x9e0>)
 800188a:	f004 ffc3 	bl	8006814 <siprintf>
					       		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <main+0x9e0>)
 8001890:	f7fe fca6 	bl	80001e0 <strlen>
 8001894:	4603      	mov	r3, r0
 8001896:	b29a      	uxth	r2, r3
 8001898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189c:	4938      	ldr	r1, [pc, #224]	; (8001980 <main+0x9e0>)
 800189e:	4839      	ldr	r0, [pc, #228]	; (8001984 <main+0x9e4>)
 80018a0:	f004 f95d 	bl	8005b5e <HAL_UART_Transmit>
					       	break;
 80018a4:	e0e4      	b.n	8001a70 <main+0xad0>
					       	case'f':
					       		Vmax-=0.1;
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <main+0x9d4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe ff7e 	bl	80007ac <__aeabi_f2d>
 80018b0:	a327      	add	r3, pc, #156	; (adr r3, 8001950 <main+0x9b0>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe19 	bl	80004ec <__aeabi_dsub>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f853 	bl	800096c <__aeabi_d2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <main+0x9d4>)
 80018ca:	6013      	str	r3, [r2, #0]
					       		sprintf(KxDataBuffer, "Vmax=%dV \r\n", Vmax);
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <main+0x9d4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe ff6b 	bl	80007ac <__aeabi_f2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	492b      	ldr	r1, [pc, #172]	; (8001988 <main+0x9e8>)
 80018dc:	4828      	ldr	r0, [pc, #160]	; (8001980 <main+0x9e0>)
 80018de:	f004 ff99 	bl	8006814 <siprintf>
					       		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 80018e2:	4827      	ldr	r0, [pc, #156]	; (8001980 <main+0x9e0>)
 80018e4:	f7fe fc7c 	bl	80001e0 <strlen>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f0:	4923      	ldr	r1, [pc, #140]	; (8001980 <main+0x9e0>)
 80018f2:	4824      	ldr	r0, [pc, #144]	; (8001984 <main+0x9e4>)
 80018f4:	f004 f933 	bl	8005b5e <HAL_UART_Transmit>
					        break;
 80018f8:	e0ba      	b.n	8001a70 <main+0xad0>
					       	case'g':
					       		Vmin+=0.1;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <main+0x9cc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe ff54 	bl	80007ac <__aeabi_f2d>
 8001904:	a312      	add	r3, pc, #72	; (adr r3, 8001950 <main+0x9b0>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fdf1 	bl	80004f0 <__adddf3>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f829 	bl	800096c <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <main+0x9cc>)
 800191e:	6013      	str	r3, [r2, #0]
					       		sprintf(KxDataBuffer, "Vmin=%dV \r\n", Vmin);
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <main+0x9cc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe ff41 	bl	80007ac <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4917      	ldr	r1, [pc, #92]	; (800198c <main+0x9ec>)
 8001930:	4813      	ldr	r0, [pc, #76]	; (8001980 <main+0x9e0>)
 8001932:	f004 ff6f 	bl	8006814 <siprintf>
					       		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <main+0x9e0>)
 8001938:	f7fe fc52 	bl	80001e0 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	b29a      	uxth	r2, r3
 8001940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <main+0x9e0>)
 8001946:	480f      	ldr	r0, [pc, #60]	; (8001984 <main+0x9e4>)
 8001948:	f004 f909 	bl	8005b5e <HAL_UART_Transmit>
					        break;
 800194c:	e090      	b.n	8001a70 <main+0xad0>
 800194e:	bf00      	nop
 8001950:	9999999a 	.word	0x9999999a
 8001954:	3fb99999 	.word	0x3fb99999
 8001958:	20000108 	.word	0x20000108
 800195c:	20000118 	.word	0x20000118
 8001960:	20000120 	.word	0x20000120
 8001964:	2000011c 	.word	0x2000011c
 8001968:	49742400 	.word	0x49742400
 800196c:	20000104 	.word	0x20000104
 8001970:	20000100 	.word	0x20000100
 8001974:	20000004 	.word	0x20000004
 8001978:	200000f4 	.word	0x200000f4
 800197c:	08007080 	.word	0x08007080
 8001980:	200000b4 	.word	0x200000b4
 8001984:	200002d0 	.word	0x200002d0
 8001988:	08007090 	.word	0x08007090
 800198c:	0800709c 	.word	0x0800709c
					       	case'h':
					       		Vmin-=0.1;
 8001990:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <main+0xae0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe ff09 	bl	80007ac <__aeabi_f2d>
 800199a:	a337      	add	r3, pc, #220	; (adr r3, 8001a78 <main+0xad8>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fda4 	bl	80004ec <__aeabi_dsub>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7fe ffde 	bl	800096c <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a33      	ldr	r2, [pc, #204]	; (8001a80 <main+0xae0>)
 80019b4:	6013      	str	r3, [r2, #0]
					       		sprintf(KxDataBuffer, "Vmin=%dV \r\n", Vmin);
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <main+0xae0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fef6 	bl	80007ac <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	492f      	ldr	r1, [pc, #188]	; (8001a84 <main+0xae4>)
 80019c6:	4830      	ldr	r0, [pc, #192]	; (8001a88 <main+0xae8>)
 80019c8:	f004 ff24 	bl	8006814 <siprintf>
					       		HAL_UART_Transmit(&huart2, (uint8_t*)KxDataBuffer, strlen(KxDataBuffer), 1000);
 80019cc:	482e      	ldr	r0, [pc, #184]	; (8001a88 <main+0xae8>)
 80019ce:	f7fe fc07 	bl	80001e0 <strlen>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	492b      	ldr	r1, [pc, #172]	; (8001a88 <main+0xae8>)
 80019dc:	482b      	ldr	r0, [pc, #172]	; (8001a8c <main+0xaec>)
 80019de:	f004 f8be 	bl	8005b5e <HAL_UART_Transmit>
					       	break;
 80019e2:	e045      	b.n	8001a70 <main+0xad0>
					       	case'j':
                                duty+=0.1;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <main+0xaf0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fedf 	bl	80007ac <__aeabi_f2d>
 80019ee:	a322      	add	r3, pc, #136	; (adr r3, 8001a78 <main+0xad8>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fd7c 	bl	80004f0 <__adddf3>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7fe ffb4 	bl	800096c <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <main+0xaf0>)
 8001a08:	6013      	str	r3, [r2, #0]
					       	break;
 8001a0a:	e031      	b.n	8001a70 <main+0xad0>
					       	case'k':
                                duty-=0.1;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <main+0xaf0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fecb 	bl	80007ac <__aeabi_f2d>
 8001a16:	a318      	add	r3, pc, #96	; (adr r3, 8001a78 <main+0xad8>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fd66 	bl	80004ec <__aeabi_dsub>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7fe ffa0 	bl	800096c <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <main+0xaf0>)
 8001a30:	6013      	str	r3, [r2, #0]
					       	break;
 8001a32:	e01d      	b.n	8001a70 <main+0xad0>
					    	default:
					    	{
					    	char temp[]="You pressed the wrong button, please try again.\r\n";
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <main+0xaf4>)
 8001a36:	f107 040c 	add.w	r4, r7, #12
 8001a3a:	461d      	mov	r5, r3
 8001a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	8023      	strh	r3, [r4, #0]
					    	HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fbc5 	bl	80001e0 <strlen>
 8001a56:	4603      	mov	r3, r0
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	f107 010c 	add.w	r1, r7, #12
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	480a      	ldr	r0, [pc, #40]	; (8001a8c <main+0xaec>)
 8001a64:	f004 f87b 	bl	8005b5e <HAL_UART_Transmit>
					    	}
					    	STATE_Display = StateDisplay_Menu3_Print;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <main+0xaf8>)
 8001a6a:	2228      	movs	r2, #40	; 0x28
 8001a6c:	801a      	strh	r2, [r3, #0]
					    	break;
 8001a6e:	bf00      	nop
					    }
					    break;
 8001a70:	e015      	b.n	8001a9e <main+0xafe>
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	9999999a 	.word	0x9999999a
 8001a7c:	3fb99999 	.word	0x3fb99999
 8001a80:	20000104 	.word	0x20000104
 8001a84:	0800709c 	.word	0x0800709c
 8001a88:	200000b4 	.word	0x200000b4
 8001a8c:	200002d0 	.word	0x200002d0
 8001a90:	2000011c 	.word	0x2000011c
 8001a94:	080070f4 	.word	0x080070f4
 8001a98:	200000f4 	.word	0x200000f4
					        break;
 8001a9c:	bf00      	nop
			     }
		static uint64_t timestamp = 0;
		if (micros() - timestamp > 100)
 8001a9e:	f000 fc2b 	bl	80022f8 <micros>
 8001aa2:	4b8d      	ldr	r3, [pc, #564]	; (8001cd8 <main+0xd38>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	ebb0 0802 	subs.w	r8, r0, r2
 8001aac:	eb61 0903 	sbc.w	r9, r1, r3
 8001ab0:	f1b9 0f00 	cmp.w	r9, #0
 8001ab4:	bf08      	it	eq
 8001ab6:	f1b8 0f65 	cmpeq.w	r8, #101	; 0x65
 8001aba:	f4ff aa98 	bcc.w	8000fee <main+0x4e>
		{
			timestamp = micros();
 8001abe:	f000 fc1b 	bl	80022f8 <micros>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4984      	ldr	r1, [pc, #528]	; (8001cd8 <main+0xd38>)
 8001ac8:	e9c1 2300 	strd	r2, r3, [r1]
			if(x==1)
 8001acc:	4b83      	ldr	r3, [pc, #524]	; (8001cdc <main+0xd3c>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf08      	it	eq
 8001ad6:	2a01      	cmpeq	r2, #1
 8001ad8:	d167      	bne.n	8001baa <main+0xc0a>
			{
				dataOut=dataOut+(float)((Vmax-Vmin)*f*0.0001)*(4095/3.3);
 8001ada:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <main+0xd40>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fe64 	bl	80007ac <__aeabi_f2d>
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	460d      	mov	r5, r1
 8001ae8:	4b7e      	ldr	r3, [pc, #504]	; (8001ce4 <main+0xd44>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	4b7e      	ldr	r3, [pc, #504]	; (8001ce8 <main+0xd48>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001af8:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <main+0xd4c>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fe51 	bl	80007ac <__aeabi_f2d>
 8001b0a:	a36f      	add	r3, pc, #444	; (adr r3, 8001cc8 <main+0xd28>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fbbe 	bl	8000290 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7fe ff26 	bl	800096c <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fe42 	bl	80007ac <__aeabi_f2d>
 8001b28:	a369      	add	r3, pc, #420	; (adr r3, 8001cd0 <main+0xd30>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fbaf 	bl	8000290 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fcd9 	bl	80004f0 <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7fe ff11 	bl	800096c <__aeabi_d2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a64      	ldr	r2, [pc, #400]	; (8001ce0 <main+0xd40>)
 8001b4e:	6013      	str	r3, [r2, #0]
				if(dataOut>=Vmax*(4095/3.3))
 8001b50:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <main+0xd40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fe29 	bl	80007ac <__aeabi_f2d>
 8001b5a:	4604      	mov	r4, r0
 8001b5c:	460d      	mov	r5, r1
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <main+0xd44>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fe22 	bl	80007ac <__aeabi_f2d>
 8001b68:	a359      	add	r3, pc, #356	; (adr r3, 8001cd0 <main+0xd30>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fb8f 	bl	8000290 <__aeabi_dmul>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4620      	mov	r0, r4
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f7fe fee3 	bl	8000944 <__aeabi_dcmpge>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d012      	beq.n	8001baa <main+0xc0a>
				{
				dataOut=Vmin*(4095/3.3);
 8001b84:	4b58      	ldr	r3, [pc, #352]	; (8001ce8 <main+0xd48>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fe0f 	bl	80007ac <__aeabi_f2d>
 8001b8e:	a350      	add	r3, pc, #320	; (adr r3, 8001cd0 <main+0xd30>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fb7c 	bl	8000290 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe fee4 	bl	800096c <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4a4e      	ldr	r2, [pc, #312]	; (8001ce0 <main+0xd40>)
 8001ba8:	6013      	str	r3, [r2, #0]
				}
			}
			if(x==2)
 8001baa:	4b4c      	ldr	r3, [pc, #304]	; (8001cdc <main+0xd3c>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf08      	it	eq
 8001bb4:	2a02      	cmpeq	r2, #2
 8001bb6:	d167      	bne.n	8001c88 <main+0xce8>
			{
				dataOut=dataOut-(float)((Vmax-Vmin)*f*0.0001)*(4095/3.3);
 8001bb8:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <main+0xd40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fdf5 	bl	80007ac <__aeabi_f2d>
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	460d      	mov	r5, r1
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <main+0xd44>)
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	4b46      	ldr	r3, [pc, #280]	; (8001ce8 <main+0xd48>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bd6:	4b45      	ldr	r3, [pc, #276]	; (8001cec <main+0xd4c>)
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be0:	ee17 0a90 	vmov	r0, s15
 8001be4:	f7fe fde2 	bl	80007ac <__aeabi_f2d>
 8001be8:	a337      	add	r3, pc, #220	; (adr r3, 8001cc8 <main+0xd28>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fb4f 	bl	8000290 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7fe feb7 	bl	800096c <__aeabi_d2f>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fdd3 	bl	80007ac <__aeabi_f2d>
 8001c06:	a332      	add	r3, pc, #200	; (adr r3, 8001cd0 <main+0xd30>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fb40 	bl	8000290 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fc68 	bl	80004ec <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe fea2 	bl	800096c <__aeabi_d2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <main+0xd40>)
 8001c2c:	6013      	str	r3, [r2, #0]
				if(dataOut<=Vmin*(4095/3.3))
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <main+0xd40>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fdba 	bl	80007ac <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <main+0xd48>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fdb3 	bl	80007ac <__aeabi_f2d>
 8001c46:	a322      	add	r3, pc, #136	; (adr r3, 8001cd0 <main+0xd30>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fb20 	bl	8000290 <__aeabi_dmul>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fe6a 	bl	8000930 <__aeabi_dcmple>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <main+0xce8>
				{
				dataOut=Vmax*(4095/3.3);
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <main+0xd44>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fda0 	bl	80007ac <__aeabi_f2d>
 8001c6c:	a318      	add	r3, pc, #96	; (adr r3, 8001cd0 <main+0xd30>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fb0d 	bl	8000290 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe fe75 	bl	800096c <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <main+0xd40>)
 8001c86:	6013      	str	r3, [r2, #0]
				}
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <main+0xd50>)
 8001c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f47f a9ac 	bne.w	8000fee <main+0x4e>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9a:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <main+0xd54>)
 8001c9c:	f002 fa08 	bl	80040b0 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f47f a9a3 	bne.w	8000fee <main+0x4e>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, (uint16_t)dataOut);
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <main+0xd58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <main+0xd40>)
 8001cae:	edd2 7a00 	vldr	s15, [r2]
 8001cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb6:	ee17 2a90 	vmov	r2, s15
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fac0 	bl	8002244 <MCP4922SetOutput>
	{
 8001cc4:	f7ff b993 	b.w	8000fee <main+0x4e>
 8001cc8:	eb1c432d 	.word	0xeb1c432d
 8001ccc:	3f1a36e2 	.word	0x3f1a36e2
 8001cd0:	e8ba2e8c 	.word	0xe8ba2e8c
 8001cd4:	409363a2 	.word	0x409363a2
 8001cd8:	20000128 	.word	0x20000128
 8001cdc:	20000110 	.word	0x20000110
 8001ce0:	20000100 	.word	0x20000100
 8001ce4:	20000004 	.word	0x20000004
 8001ce8:	20000104 	.word	0x20000104
 8001cec:	20000108 	.word	0x20000108
 8001cf0:	20000188 	.word	0x20000188
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	20000000 	.word	0x20000000

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	; 0x50
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2230      	movs	r2, #48	; 0x30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fd7a 	bl	8006804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <SystemClock_Config+0xc8>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <SystemClock_Config+0xc8>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <SystemClock_Config+0xc8>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d60:	2310      	movs	r3, #16
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d70:	2364      	movs	r3, #100	; 0x64
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 f9eb 	bl	800415c <HAL_RCC_OscConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d8c:	f000 face 	bl	800232c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
 8001d92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d94:	2302      	movs	r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2103      	movs	r1, #3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f002 fc4d 	bl	800464c <HAL_RCC_ClockConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001db8:	f000 fab8 	bl	800232c <Error_Handler>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3750      	adds	r7, #80	; 0x50
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000

08001dcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001de0:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <MX_ADC1_Init+0xa0>)
 8001de2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e16:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e30:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e32:	f000 fd4f 	bl	80028d4 <HAL_ADC_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001e3c:	f000 fa76 	bl	800232c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_ADC1_Init+0x9c>)
 8001e52:	f000 ffdb 	bl	8002e0c <HAL_ADC_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001e5c:	f000 fa66 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200001e0 	.word	0x200001e0
 8001e6c:	40012000 	.word	0x40012000

08001e70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001e76:	4a19      	ldr	r2, [pc, #100]	; (8001edc <MX_SPI3_Init+0x6c>)
 8001e78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001ebe:	220a      	movs	r2, #10
 8001ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_SPI3_Init+0x68>)
 8001ec4:	f002 fdbe 	bl	8004a44 <HAL_SPI_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001ece:	f000 fa2d 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000188 	.word	0x20000188
 8001edc:	40003c00 	.word	0x40003c00

08001ee0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001efc:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <MX_TIM3_Init+0x94>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f04:	2264      	movs	r2, #100	; 0x64
 8001f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f10:	2264      	movs	r2, #100	; 0x64
 8001f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f20:	4813      	ldr	r0, [pc, #76]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f22:	f003 f933 	bl	800518c <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001f2c:	f000 f9fe 	bl	800232c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f36:	f107 0308 	add.w	r3, r7, #8
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	480c      	ldr	r0, [pc, #48]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f3e:	f003 fb39 	bl	80055b4 <HAL_TIM_ConfigClockSource>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001f48:	f000 f9f0 	bl	800232c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_TIM3_Init+0x90>)
 8001f5a:	f003 fd31 	bl	80059c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001f64:	f000 f9e2 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000140 	.word	0x20000140
 8001f74:	40000400 	.word	0x40000400

08001f78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_TIM11_Init+0x40>)
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <MX_TIM11_Init+0x44>)
 8001f80:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 8001f82:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <MX_TIM11_Init+0x40>)
 8001f84:	2264      	movs	r2, #100	; 0x64
 8001f86:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <MX_TIM11_Init+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <MX_TIM11_Init+0x40>)
 8001f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f94:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <MX_TIM11_Init+0x40>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <MX_TIM11_Init+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_TIM11_Init+0x40>)
 8001fa4:	f003 f8f2 	bl	800518c <HAL_TIM_Base_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001fae:	f000 f9bd 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000228 	.word	0x20000228
 8001fbc:	40014800 	.word	0x40014800

08001fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fc6:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_USART2_UART_Init+0x50>)
 8001fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <MX_USART2_UART_Init+0x4c>)
 8001ff8:	f003 fd64 	bl	8005ac4 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002002:	f000 f993 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200002d0 	.word	0x200002d0
 8002010:	40004400 	.word	0x40004400

08002014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_DMA_Init+0x3c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <MX_DMA_Init+0x3c>)
 8002024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_DMA_Init+0x3c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2038      	movs	r0, #56	; 0x38
 800203c:	f001 fa7b 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002040:	2038      	movs	r0, #56	; 0x38
 8002042:	f001 fa94 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	4b48      	ldr	r3, [pc, #288]	; (8002190 <MX_GPIO_Init+0x13c>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a47      	ldr	r2, [pc, #284]	; (8002190 <MX_GPIO_Init+0x13c>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <MX_GPIO_Init+0x13c>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <MX_GPIO_Init+0x13c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a40      	ldr	r2, [pc, #256]	; (8002190 <MX_GPIO_Init+0x13c>)
 8002090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <MX_GPIO_Init+0x13c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <MX_GPIO_Init+0x13c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a39      	ldr	r2, [pc, #228]	; (8002190 <MX_GPIO_Init+0x13c>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <MX_GPIO_Init+0x13c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <MX_GPIO_Init+0x13c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a32      	ldr	r2, [pc, #200]	; (8002190 <MX_GPIO_Init+0x13c>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <MX_GPIO_Init+0x13c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2120      	movs	r1, #32
 80020de:	482d      	ldr	r0, [pc, #180]	; (8002194 <MX_GPIO_Init+0x140>)
 80020e0:	f001 fffe 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ea:	482b      	ldr	r0, [pc, #172]	; (8002198 <MX_GPIO_Init+0x144>)
 80020ec:	f001 fff8 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	4829      	ldr	r0, [pc, #164]	; (800219c <MX_GPIO_Init+0x148>)
 80020f6:	f001 fff3 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002100:	4824      	ldr	r0, [pc, #144]	; (8002194 <MX_GPIO_Init+0x140>)
 8002102:	f001 ffed 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <MX_GPIO_Init+0x14c>)
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	4820      	ldr	r0, [pc, #128]	; (800219c <MX_GPIO_Init+0x148>)
 800211c:	f001 fe44 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002120:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4816      	ldr	r0, [pc, #88]	; (8002194 <MX_GPIO_Init+0x140>)
 800213a:	f001 fe35 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 800213e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	2301      	movs	r3, #1
 8002146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4810      	ldr	r0, [pc, #64]	; (8002198 <MX_GPIO_Init+0x144>)
 8002158:	f001 fe26 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	480a      	ldr	r0, [pc, #40]	; (800219c <MX_GPIO_Init+0x148>)
 8002174:	f001 fe18 	bl	8003da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2028      	movs	r0, #40	; 0x28
 800217e:	f001 f9da 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002182:	2028      	movs	r0, #40	; 0x28
 8002184:	f001 f9f3 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	10210000 	.word	0x10210000

080021a4 <UARTRecieveIT>:

}


int16_t UARTRecieveIT()
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 80021aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ae:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <UARTRecieveIT+0x54>)
 80021b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <UARTRecieveIT+0x54>)
 80021b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <UARTRecieveIT+0x58>)
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d010      	beq.n	80021e8 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <UARTRecieveIT+0x58>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <UARTRecieveIT+0x5c>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <UARTRecieveIT+0x58>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <UARTRecieveIT+0x54>)
 80021d8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80021da:	fbb3 f1f2 	udiv	r1, r3, r2
 80021de:	fb02 f201 	mul.w	r2, r2, r1
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <UARTRecieveIT+0x58>)
 80021e6:	6013      	str	r3, [r2, #0]
	}
	return data;
 80021e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	200002d0 	.word	0x200002d0
 80021fc:	20000130 	.word	0x20000130
 8002200:	200000d4 	.word	0x200000d4

08002204 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 800220c:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_UART_RxCpltCallback+0x30>)
 800220e:	490a      	ldr	r1, [pc, #40]	; (8002238 <HAL_UART_RxCpltCallback+0x34>)
 8002210:	480a      	ldr	r0, [pc, #40]	; (800223c <HAL_UART_RxCpltCallback+0x38>)
 8002212:	f004 faff 	bl	8006814 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002216:	4809      	ldr	r0, [pc, #36]	; (800223c <HAL_UART_RxCpltCallback+0x38>)
 8002218:	f7fd ffe2 	bl	80001e0 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	b29a      	uxth	r2, r3
 8002220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002224:	4905      	ldr	r1, [pc, #20]	; (800223c <HAL_UART_RxCpltCallback+0x38>)
 8002226:	4806      	ldr	r0, [pc, #24]	; (8002240 <HAL_UART_RxCpltCallback+0x3c>)
 8002228:	f003 fc99 	bl	8005b5e <HAL_UART_Transmit>
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200000d4 	.word	0x200000d4
 8002238:	08007288 	.word	0x08007288
 800223c:	20000094 	.word	0x20000094
 8002240:	200002d0 	.word	0x200002d0

08002244 <MCP4922SetOutput>:
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	460a      	mov	r2, r1
 800224e:	71fb      	strb	r3, [r7, #7]
 8002250:	4613      	mov	r3, r2
 8002252:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	031b      	lsls	r3, r3, #12
 800225e:	b29b      	uxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800226a:	4807      	ldr	r0, [pc, #28]	; (8002288 <MCP4922SetOutput+0x44>)
 800226c:	f001 ff38 	bl	80040e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2201      	movs	r2, #1
 8002276:	4619      	mov	r1, r3
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <MCP4922SetOutput+0x48>)
 800227a:	f002 fc6d 	bl	8004b58 <HAL_SPI_Transmit_IT>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40020400 	.word	0x40020400
 800228c:	20000188 	.word	0x20000188

08002290 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <HAL_SPI_TxCpltCallback+0x24>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d105      	bne.n	80022ac <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80022a0:	2201      	movs	r2, #1
 80022a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <HAL_SPI_TxCpltCallback+0x28>)
 80022a8:	f001 ff1a 	bl	80040e0 <HAL_GPIO_WritePin>
	}
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000188 	.word	0x20000188
 80022b8:	40020400 	.word	0x40020400

080022bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b4b0      	push	{r4, r5, r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10c      	bne.n	80022e6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	1814      	adds	r4, r2, r0
 80022dc:	eb43 0501 	adc.w	r5, r3, r1
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022e2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bcb0      	pop	{r4, r5, r7}
 80022ee:	4770      	bx	lr
 80022f0:	20000228 	.word	0x20000228
 80022f4:	200000f8 	.word	0x200000f8

080022f8 <micros>:

inline uint64_t micros()
{
 80022f8:	b4b0      	push	{r4, r5, r7}
 80022fa:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <micros+0x2c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	4618      	mov	r0, r3
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <micros+0x30>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	1884      	adds	r4, r0, r2
 8002310:	eb41 0503 	adc.w	r5, r1, r3
 8002314:	4622      	mov	r2, r4
 8002316:	462b      	mov	r3, r5
}
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	bcb0      	pop	{r4, r5, r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000228 	.word	0x20000228
 8002328:	200000f8 	.word	0x200000f8

0800232c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002330:	b672      	cpsid	i
}
 8002332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002334:	e7fe      	b.n	8002334 <Error_Handler+0x8>
	...

08002338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_MspInit+0x4c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_MspInit+0x4c>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002376:	2007      	movs	r0, #7
 8002378:	f001 f8d2 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a33      	ldr	r2, [pc, #204]	; (8002474 <HAL_ADC_MspInit+0xec>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d15f      	bne.n	800246a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_ADC_MspInit+0xf0>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_ADC_MspInit+0xf0>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_ADC_MspInit+0xf0>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_ADC_MspInit+0xf0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <HAL_ADC_MspInit+0xf0>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_ADC_MspInit+0xf0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023e2:	2301      	movs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e6:	2303      	movs	r3, #3
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4821      	ldr	r0, [pc, #132]	; (800247c <HAL_ADC_MspInit+0xf4>)
 80023f6:	f001 fcd7 	bl	8003da8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 80023fc:	4a21      	ldr	r2, [pc, #132]	; (8002484 <HAL_ADC_MspInit+0xfc>)
 80023fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002402:	2200      	movs	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002418:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 800241c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002420:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002428:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 800242c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002430:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002434:	2200      	movs	r2, #0
 8002436:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800243e:	4810      	ldr	r0, [pc, #64]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002440:	f001 f8b0 	bl	80035a4 <HAL_DMA_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800244a:	f7ff ff6f 	bl	800232c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_ADC_MspInit+0xf8>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2012      	movs	r0, #18
 8002460:	f001 f869 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002464:	2012      	movs	r0, #18
 8002466:	f001 f882 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40012000 	.word	0x40012000
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000
 8002480:	20000270 	.word	0x20000270
 8002484:	40026410 	.word	0x40026410

08002488 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_SPI_MspInit+0x94>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d133      	bne.n	8002512 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_SPI_MspInit+0x98>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_SPI_MspInit+0x98>)
 80024b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_SPI_MspInit+0x98>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_SPI_MspInit+0x98>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a14      	ldr	r2, [pc, #80]	; (8002520 <HAL_SPI_MspInit+0x98>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_SPI_MspInit+0x98>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024e2:	2338      	movs	r3, #56	; 0x38
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ee:	2303      	movs	r3, #3
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024f2:	2306      	movs	r3, #6
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <HAL_SPI_MspInit+0x9c>)
 80024fe:	f001 fc53 	bl	8003da8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	2033      	movs	r0, #51	; 0x33
 8002508:	f001 f815 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800250c:	2033      	movs	r0, #51	; 0x33
 800250e:	f001 f82e 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3728      	adds	r7, #40	; 0x28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40003c00 	.word	0x40003c00
 8002520:	40023800 	.word	0x40023800
 8002524:	40020400 	.word	0x40020400

08002528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_TIM_Base_MspInit+0x70>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_TIM_Base_MspInit+0x74>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002556:	e01a      	b.n	800258e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_TIM_Base_MspInit+0x78>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d115      	bne.n	800258e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <HAL_TIM_Base_MspInit+0x74>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002570:	6453      	str	r3, [r2, #68]	; 0x44
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_TIM_Base_MspInit+0x74>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	201a      	movs	r0, #26
 8002584:	f000 ffd7 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002588:	201a      	movs	r0, #26
 800258a:	f000 fff0 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40000400 	.word	0x40000400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40014800 	.word	0x40014800

080025a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_UART_MspInit+0x94>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d133      	bne.n	800262e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_UART_MspInit+0x98>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_UART_MspInit+0x98>)
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_UART_MspInit+0x98>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_UART_MspInit+0x98>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_UART_MspInit+0x98>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_UART_MspInit+0x98>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025fe:	230c      	movs	r3, #12
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260e:	2307      	movs	r3, #7
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4809      	ldr	r0, [pc, #36]	; (8002640 <HAL_UART_MspInit+0x9c>)
 800261a:	f001 fbc5 	bl	8003da8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	2026      	movs	r0, #38	; 0x26
 8002624:	f000 ff87 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002628:	2026      	movs	r0, #38	; 0x26
 800262a:	f000 ffa0 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40004400 	.word	0x40004400
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000

08002644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <NMI_Handler+0x4>

0800264a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800264e:	e7fe      	b.n	800264e <HardFault_Handler+0x4>

08002650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002654:	e7fe      	b.n	8002654 <MemManage_Handler+0x4>

08002656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265a:	e7fe      	b.n	800265a <BusFault_Handler+0x4>

0800265c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002660:	e7fe      	b.n	8002660 <UsageFault_Handler+0x4>

08002662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002690:	f000 f900 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}

08002698 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <ADC_IRQHandler+0x10>)
 800269e:	f000 f95c 	bl	800295a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	200001e0 	.word	0x200001e0

080026ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80026b2:	f002 fe77 	bl	80053a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000228 	.word	0x20000228

080026c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <USART2_IRQHandler+0x10>)
 80026c6:	f003 fb0d 	bl	8005ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200002d0 	.word	0x200002d0

080026d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80026d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026dc:	f001 fd1a 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <SPI3_IRQHandler+0x10>)
 80026ea:	f002 fabf 	bl	8004c6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000188 	.word	0x20000188

080026f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026fc:	4802      	ldr	r0, [pc, #8]	; (8002708 <DMA2_Stream0_IRQHandler+0x10>)
 80026fe:	f001 f8e9 	bl	80038d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000270 	.word	0x20000270

0800270c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800273c:	f004 f82a 	bl	8006794 <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20020000 	.word	0x20020000
 800276c:	00000400 	.word	0x00000400
 8002770:	20000134 	.word	0x20000134
 8002774:	20000328 	.word	0x20000328

08002778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <SystemInit+0x20>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	4a05      	ldr	r2, [pc, #20]	; (8002798 <SystemInit+0x20>)
 8002784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800279c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a0:	480d      	ldr	r0, [pc, #52]	; (80027d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027a2:	490e      	ldr	r1, [pc, #56]	; (80027dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a4:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b8:	4c0b      	ldr	r4, [pc, #44]	; (80027e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027c6:	f7ff ffd7 	bl	8002778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ca:	f003 ffe9 	bl	80067a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ce:	f7fe fbe7 	bl	8000fa0 <main>
  bx  lr    
 80027d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027e0:	080072fc 	.word	0x080072fc
  ldr r2, =_sbss
 80027e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027e8:	20000328 	.word	0x20000328

080027ec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ec:	e7fe      	b.n	80027ec <DMA1_Stream0_IRQHandler>
	...

080027f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <HAL_Init+0x40>)
 80027fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_Init+0x40>)
 8002806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_Init+0x40>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 fe81 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	2000      	movs	r0, #0
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fd88 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fe99 	bl	800358a <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f000 fe61 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000008 	.word	0x20000008
 800288c:	20000010 	.word	0x20000010
 8002890:	2000000c 	.word	0x2000000c

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000010 	.word	0x20000010
 80028b8:	20000314 	.word	0x20000314

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000314 	.word	0x20000314

080028d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e033      	b.n	8002952 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fd48 	bl	8002388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	2b00      	cmp	r3, #0
 8002910:	d118      	bne.n	8002944 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800291a:	f023 0302 	bic.w	r3, r3, #2
 800291e:	f043 0202 	orr.w	r2, r3, #2
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fba2 	bl	8003070 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f023 0303 	bic.w	r3, r3, #3
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
 8002942:	e001      	b.n	8002948 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b02      	cmp	r3, #2
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b20      	cmp	r3, #32
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d049      	beq.n	8002a30 <HAL_ADC_IRQHandler+0xd6>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d046      	beq.n	8002a30 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d12b      	bne.n	8002a20 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d127      	bne.n	8002a20 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d006      	beq.n	80029ec <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d119      	bne.n	8002a20 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 0220 	bic.w	r2, r2, #32
 80029fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d105      	bne.n	8002a20 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f043 0201 	orr.w	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f9cb 	bl	8002dbc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0212 	mvn.w	r2, #18
 8002a2e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d057      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x1b8>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d054      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d139      	bne.n	8002b02 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d12b      	bne.n	8002b02 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d124      	bne.n	8002b02 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11d      	bne.n	8002b02 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d119      	bne.n	8002b02 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002adc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0201 	orr.w	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fc32 	bl	800336c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 020c 	mvn.w	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b32:	2b40      	cmp	r3, #64	; 0x40
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d017      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x21a>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d014      	beq.n	8002b74 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10d      	bne.n	8002b74 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f93d 	bl	8002de4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0201 	mvn.w	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x27a>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f043 0202 	orr.w	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0220 	mvn.w	r2, #32
 8002bc2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f917 	bl	8002df8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f06f 0220 	mvn.w	r2, #32
 8002bd2:	601a      	str	r2, [r3, #0]
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_Start_DMA+0x1e>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e0ce      	b.n	8002d98 <HAL_ADC_Start_DMA+0x1bc>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d018      	beq.n	8002c42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c20:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <HAL_ADC_Start_DMA+0x1c4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a5f      	ldr	r2, [pc, #380]	; (8002da4 <HAL_ADC_Start_DMA+0x1c8>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9a      	lsrs	r2, r3, #18
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f9      	bne.n	8002c36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c50:	d107      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f040 8086 	bne.w	8002d7e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d106      	bne.n	8002cc0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f023 0206 	bic.w	r2, r3, #6
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_ADC_Start_DMA+0x1cc>)
 8002cd0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	4a35      	ldr	r2, [pc, #212]	; (8002dac <HAL_ADC_Start_DMA+0x1d0>)
 8002cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <HAL_ADC_Start_DMA+0x1d4>)
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	4a33      	ldr	r2, [pc, #204]	; (8002db4 <HAL_ADC_Start_DMA+0x1d8>)
 8002ce8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	334c      	adds	r3, #76	; 0x4c
 8002d1e:	4619      	mov	r1, r3
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f000 fcec 	bl	8003700 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10f      	bne.n	8002d54 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d129      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	e020      	b.n	8002d96 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <HAL_ADC_Start_DMA+0x1dc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d11b      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1ba>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d114      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e00b      	b.n	8002d96 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000008 	.word	0x20000008
 8002da4:	431bde83 	.word	0x431bde83
 8002da8:	40012300 	.word	0x40012300
 8002dac:	08003269 	.word	0x08003269
 8002db0:	08003323 	.word	0x08003323
 8002db4:	0800333f 	.word	0x0800333f
 8002db8:	40012000 	.word	0x40012000

08002dbc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e113      	b.n	8003050 <HAL_ADC_ConfigChannel+0x244>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b09      	cmp	r3, #9
 8002e36:	d925      	bls.n	8002e84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68d9      	ldr	r1, [r3, #12]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b1e      	subs	r3, #30
 8002e4e:	2207      	movs	r2, #7
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43da      	mvns	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	400a      	ands	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68d9      	ldr	r1, [r3, #12]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4603      	mov	r3, r0
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4403      	add	r3, r0
 8002e76:	3b1e      	subs	r3, #30
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	e022      	b.n	8002eca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	2207      	movs	r2, #7
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	400a      	ands	r2, r1
 8002ea6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6919      	ldr	r1, [r3, #16]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	4618      	mov	r0, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4403      	add	r3, r0
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d824      	bhi.n	8002f1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b05      	subs	r3, #5
 8002ee4:	221f      	movs	r2, #31
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43da      	mvns	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b05      	subs	r3, #5
 8002f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1a:	e04c      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d824      	bhi.n	8002f6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b23      	subs	r3, #35	; 0x23
 8002f36:	221f      	movs	r2, #31
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	400a      	ands	r2, r1
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	4618      	mov	r0, r3
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3b23      	subs	r3, #35	; 0x23
 8002f60:	fa00 f203 	lsl.w	r2, r0, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f6c:	e023      	b.n	8002fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3b41      	subs	r3, #65	; 0x41
 8002f80:	221f      	movs	r2, #31
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b41      	subs	r3, #65	; 0x41
 8002faa:	fa00 f203 	lsl.w	r2, r0, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb6:	4b29      	ldr	r3, [pc, #164]	; (800305c <HAL_ADC_ConfigChannel+0x250>)
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a28      	ldr	r2, [pc, #160]	; (8003060 <HAL_ADC_ConfigChannel+0x254>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1d8>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b12      	cmp	r3, #18
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <HAL_ADC_ConfigChannel+0x254>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d12b      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x23a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <HAL_ADC_ConfigChannel+0x258>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x1f4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b11      	cmp	r3, #17
 8002ffe:	d122      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a11      	ldr	r2, [pc, #68]	; (8003064 <HAL_ADC_ConfigChannel+0x258>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d111      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <HAL_ADC_ConfigChannel+0x25c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a11      	ldr	r2, [pc, #68]	; (800306c <HAL_ADC_ConfigChannel+0x260>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	0c9a      	lsrs	r2, r3, #18
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003038:	e002      	b.n	8003040 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f9      	bne.n	800303a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40012300 	.word	0x40012300
 8003060:	40012000 	.word	0x40012000
 8003064:	10000012 	.word	0x10000012
 8003068:	20000008 	.word	0x20000008
 800306c:	431bde83 	.word	0x431bde83

08003070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003078:	4b79      	ldr	r3, [pc, #484]	; (8003260 <ADC_Init+0x1f0>)
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	021a      	lsls	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6899      	ldr	r1, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	4a58      	ldr	r2, [pc, #352]	; (8003264 <ADC_Init+0x1f4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6899      	ldr	r1, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	e00f      	b.n	800316e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800315c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800316c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0202 	bic.w	r2, r2, #2
 800317c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6899      	ldr	r1, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7e1b      	ldrb	r3, [r3, #24]
 8003188:	005a      	lsls	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	3b01      	subs	r3, #1
 80031c8:	035a      	lsls	r2, r3, #13
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	e007      	b.n	80031e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	3b01      	subs	r3, #1
 8003200:	051a      	lsls	r2, r3, #20
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6899      	ldr	r1, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003226:	025a      	lsls	r2, r3, #9
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	029a      	lsls	r2, r3, #10
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	40012300 	.word	0x40012300
 8003264:	0f000001 	.word	0x0f000001

08003268 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800327e:	2b00      	cmp	r3, #0
 8003280:	d13c      	bne.n	80032fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d12b      	bne.n	80032f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d127      	bne.n	80032f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d006      	beq.n	80032c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d119      	bne.n	80032f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0220 	bic.w	r2, r2, #32
 80032ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fd61 	bl	8002dbc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032fa:	e00e      	b.n	800331a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7ff fd75 	bl	8002df8 <HAL_ADC_ErrorCallback>
}
 800330e:	e004      	b.n	800331a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	4798      	blx	r3
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f7ff fd4d 	bl	8002dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff fd4a 	bl	8002df8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b2:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	60d3      	str	r3, [r2, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 0307 	and.w	r3, r3, #7
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	db0b      	blt.n	800340e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4907      	ldr	r1, [pc, #28]	; (800341c <__NVIC_EnableIRQ+0x38>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2001      	movs	r0, #1
 8003406:	fa00 f202 	lsl.w	r2, r0, r2
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e100 	.word	0xe000e100

08003420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	db0a      	blt.n	800344a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	490c      	ldr	r1, [pc, #48]	; (800346c <__NVIC_SetPriority+0x4c>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	440b      	add	r3, r1
 8003444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003448:	e00a      	b.n	8003460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4908      	ldr	r1, [pc, #32]	; (8003470 <__NVIC_SetPriority+0x50>)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	3b04      	subs	r3, #4
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	440b      	add	r3, r1
 800345e:	761a      	strb	r2, [r3, #24]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f1c3 0307 	rsb	r3, r3, #7
 800348e:	2b04      	cmp	r3, #4
 8003490:	bf28      	it	cs
 8003492:	2304      	movcs	r3, #4
 8003494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3304      	adds	r3, #4
 800349a:	2b06      	cmp	r3, #6
 800349c:	d902      	bls.n	80034a4 <NVIC_EncodePriority+0x30>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3b03      	subs	r3, #3
 80034a2:	e000      	b.n	80034a6 <NVIC_EncodePriority+0x32>
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43da      	mvns	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	401a      	ands	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43d9      	mvns	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	4313      	orrs	r3, r2
         );
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff8e 	bl	8003420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	; (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff29 	bl	8003380 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff3e 	bl	80033c8 <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff8e 	bl	8003474 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5d 	bl	8003420 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff31 	bl	80033e4 <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa2 	bl	80034dc <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b0:	f7ff f984 	bl	80028bc <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e099      	b.n	80036f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e0:	e00f      	b.n	8003602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e2:	f7ff f96b 	bl	80028bc <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d908      	bls.n	8003602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e078      	b.n	80036f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e8      	bne.n	80035e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_DMA_Init+0x158>)
 800361c:	4013      	ands	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	2b04      	cmp	r3, #4
 800365a:	d107      	bne.n	800366c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	4313      	orrs	r3, r2
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0307 	bic.w	r3, r3, #7
 8003682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b04      	cmp	r3, #4
 8003694:	d117      	bne.n	80036c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb01 	bl	8003cb0 <DMA_CheckFifoParam>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2240      	movs	r2, #64	; 0x40
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036c2:	2301      	movs	r3, #1
 80036c4:	e016      	b.n	80036f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fab8 	bl	8003c44 <DMA_CalcBaseAndBitshift>
 80036d4:	4603      	mov	r3, r0
 80036d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	223f      	movs	r2, #63	; 0x3f
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	f010803f 	.word	0xf010803f

08003700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_DMA_Start_IT+0x26>
 8003722:	2302      	movs	r3, #2
 8003724:	e040      	b.n	80037a8 <HAL_DMA_Start_IT+0xa8>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d12f      	bne.n	800379a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fa4a 	bl	8003be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	223f      	movs	r2, #63	; 0x3f
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0216 	orr.w	r2, r2, #22
 800376e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0208 	orr.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e005      	b.n	80037a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037be:	f7ff f87d 	bl	80028bc <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e052      	b.n	8003888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0216 	bic.w	r2, r2, #22
 80037f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_DMA_Abort+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0208 	bic.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003832:	e013      	b.n	800385c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003834:	f7ff f842 	bl	80028bc <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b05      	cmp	r3, #5
 8003840:	d90c      	bls.n	800385c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2203      	movs	r2, #3
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e015      	b.n	8003888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e4      	bne.n	8003834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	223f      	movs	r2, #63	; 0x3f
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00c      	b.n	80038c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2205      	movs	r2, #5
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038e0:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <HAL_DMA_IRQHandler+0x258>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a92      	ldr	r2, [pc, #584]	; (8003b30 <HAL_DMA_IRQHandler+0x25c>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0a9b      	lsrs	r3, r3, #10
 80038ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	2208      	movs	r2, #8
 8003900:	409a      	lsls	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01a      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2208      	movs	r2, #8
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2201      	movs	r2, #1
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	f043 0202 	orr.w	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	2204      	movs	r2, #4
 800397c:	409a      	lsls	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2204      	movs	r2, #4
 800399a:	409a      	lsls	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2210      	movs	r2, #16
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d043      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d03c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2210      	movs	r2, #16
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d024      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
 8003a02:	e01f      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e016      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0208 	bic.w	r2, r2, #8
 8003a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2220      	movs	r2, #32
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 808e 	beq.w	8003b72 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8086 	beq.w	8003b72 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d136      	bne.n	8003aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0216 	bic.w	r2, r2, #22
 8003a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_DMA_IRQHandler+0x1da>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0208 	bic.w	r2, r2, #8
 8003abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	223f      	movs	r2, #63	; 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d07d      	beq.n	8003bde <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
        }
        return;
 8003aea:	e078      	b.n	8003bde <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01c      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d108      	bne.n	8003b1a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d030      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e02b      	b.n	8003b72 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d027      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
 8003b2a:	e022      	b.n	8003b72 <HAL_DMA_IRQHandler+0x29e>
 8003b2c:	20000008 	.word	0x20000008
 8003b30:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0210 	bic.w	r2, r2, #16
 8003b50:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d032      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d022      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2205      	movs	r2, #5
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d307      	bcc.n	8003bba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f2      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x2ca>
 8003bb8:	e000      	b.n	8003bbc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bde:	bf00      	nop
    }
  }
}
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop

08003be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d108      	bne.n	8003c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c26:	e007      	b.n	8003c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	3b10      	subs	r3, #16
 8003c54:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c5e:	4a13      	ldr	r2, [pc, #76]	; (8003cac <DMA_CalcBaseAndBitshift+0x68>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d909      	bls.n	8003c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	1d1a      	adds	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	659a      	str	r2, [r3, #88]	; 0x58
 8003c84:	e007      	b.n	8003c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	aaaaaaab 	.word	0xaaaaaaab
 8003cac:	080072b0 	.word	0x080072b0

08003cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11f      	bne.n	8003d0a <DMA_CheckFifoParam+0x5a>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d856      	bhi.n	8003d7e <DMA_CheckFifoParam+0xce>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <DMA_CheckFifoParam+0x28>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cfb 	.word	0x08003cfb
 8003ce0:	08003ce9 	.word	0x08003ce9
 8003ce4:	08003d7f 	.word	0x08003d7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d046      	beq.n	8003d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e043      	b.n	8003d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d02:	d140      	bne.n	8003d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e03d      	b.n	8003d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	d121      	bne.n	8003d58 <DMA_CheckFifoParam+0xa8>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d837      	bhi.n	8003d8a <DMA_CheckFifoParam+0xda>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <DMA_CheckFifoParam+0x70>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d37 	.word	0x08003d37
 8003d28:	08003d31 	.word	0x08003d31
 8003d2c:	08003d49 	.word	0x08003d49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e030      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d025      	beq.n	8003d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d46:	e022      	b.n	8003d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d50:	d11f      	bne.n	8003d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d56:	e01c      	b.n	8003d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d903      	bls.n	8003d66 <DMA_CheckFifoParam+0xb6>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d003      	beq.n	8003d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d64:	e018      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6a:	e015      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e00b      	b.n	8003d96 <DMA_CheckFifoParam+0xe6>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e00a      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
 8003d84:	e008      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e006      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e004      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
    }
  } 
  
  return status; 
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop

08003da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e159      	b.n	8004078 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f040 8148 	bne.w	8004072 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d005      	beq.n	8003dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d130      	bne.n	8003e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 0201 	and.w	r2, r3, #1
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d017      	beq.n	8003e98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d123      	bne.n	8003eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	08da      	lsrs	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3208      	adds	r2, #8
 8003eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	08da      	lsrs	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3208      	adds	r2, #8
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a2 	beq.w	8004072 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	4b57      	ldr	r3, [pc, #348]	; (8004090 <HAL_GPIO_Init+0x2e8>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4a56      	ldr	r2, [pc, #344]	; (8004090 <HAL_GPIO_Init+0x2e8>)
 8003f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3e:	4b54      	ldr	r3, [pc, #336]	; (8004090 <HAL_GPIO_Init+0x2e8>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4a:	4a52      	ldr	r2, [pc, #328]	; (8004094 <HAL_GPIO_Init+0x2ec>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a49      	ldr	r2, [pc, #292]	; (8004098 <HAL_GPIO_Init+0x2f0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d019      	beq.n	8003faa <HAL_GPIO_Init+0x202>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a48      	ldr	r2, [pc, #288]	; (800409c <HAL_GPIO_Init+0x2f4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_GPIO_Init+0x1fe>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a47      	ldr	r2, [pc, #284]	; (80040a0 <HAL_GPIO_Init+0x2f8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00d      	beq.n	8003fa2 <HAL_GPIO_Init+0x1fa>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a46      	ldr	r2, [pc, #280]	; (80040a4 <HAL_GPIO_Init+0x2fc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <HAL_GPIO_Init+0x1f6>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a45      	ldr	r2, [pc, #276]	; (80040a8 <HAL_GPIO_Init+0x300>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d101      	bne.n	8003f9a <HAL_GPIO_Init+0x1f2>
 8003f96:	2304      	movs	r3, #4
 8003f98:	e008      	b.n	8003fac <HAL_GPIO_Init+0x204>
 8003f9a:	2307      	movs	r3, #7
 8003f9c:	e006      	b.n	8003fac <HAL_GPIO_Init+0x204>
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e004      	b.n	8003fac <HAL_GPIO_Init+0x204>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e002      	b.n	8003fac <HAL_GPIO_Init+0x204>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <HAL_GPIO_Init+0x204>
 8003faa:	2300      	movs	r3, #0
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	f002 0203 	and.w	r2, r2, #3
 8003fb2:	0092      	lsls	r2, r2, #2
 8003fb4:	4093      	lsls	r3, r2
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fbc:	4935      	ldr	r1, [pc, #212]	; (8004094 <HAL_GPIO_Init+0x2ec>)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fca:	4b38      	ldr	r3, [pc, #224]	; (80040ac <HAL_GPIO_Init+0x304>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fee:	4a2f      	ldr	r2, [pc, #188]	; (80040ac <HAL_GPIO_Init+0x304>)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ff4:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <HAL_GPIO_Init+0x304>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004018:	4a24      	ldr	r2, [pc, #144]	; (80040ac <HAL_GPIO_Init+0x304>)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_GPIO_Init+0x304>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004042:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <HAL_GPIO_Init+0x304>)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004048:	4b18      	ldr	r3, [pc, #96]	; (80040ac <HAL_GPIO_Init+0x304>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800406c:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <HAL_GPIO_Init+0x304>)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3301      	adds	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b0f      	cmp	r3, #15
 800407c:	f67f aea2 	bls.w	8003dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	3724      	adds	r7, #36	; 0x24
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
 8004094:	40013800 	.word	0x40013800
 8004098:	40020000 	.word	0x40020000
 800409c:	40020400 	.word	0x40020400
 80040a0:	40020800 	.word	0x40020800
 80040a4:	40020c00 	.word	0x40020c00
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40013c00 	.word	0x40013c00

080040b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	887b      	ldrh	r3, [r7, #2]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
 80040cc:	e001      	b.n	80040d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
 80040ec:	4613      	mov	r3, r2
 80040ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040fc:	e003      	b.n	8004106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040fe:	887b      	ldrh	r3, [r7, #2]
 8004100:	041a      	lsls	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 f806 	bl	8004144 <HAL_GPIO_EXTI_Callback>
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e264      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d075      	beq.n	8004266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417a:	4ba3      	ldr	r3, [pc, #652]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004186:	4ba0      	ldr	r3, [pc, #640]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800418e:	2b08      	cmp	r3, #8
 8004190:	d112      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004192:	4b9d      	ldr	r3, [pc, #628]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419e:	d10b      	bne.n	80041b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	4b99      	ldr	r3, [pc, #612]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05b      	beq.n	8004264 <HAL_RCC_OscConfig+0x108>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d157      	bne.n	8004264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e23f      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x74>
 80041c2:	4b91      	ldr	r3, [pc, #580]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a90      	ldr	r2, [pc, #576]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	e01d      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x98>
 80041da:	4b8b      	ldr	r3, [pc, #556]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a8a      	ldr	r2, [pc, #552]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	4b88      	ldr	r3, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a87      	ldr	r2, [pc, #540]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0xb0>
 80041f4:	4b84      	ldr	r3, [pc, #528]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a83      	ldr	r2, [pc, #524]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b81      	ldr	r3, [pc, #516]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a80      	ldr	r2, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d013      	beq.n	800423c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe fb52 	bl	80028bc <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421c:	f7fe fb4e 	bl	80028bc <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	; 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e204      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0xc0>
 800423a:	e014      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fb3e 	bl	80028bc <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe fb3a 	bl	80028bc <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e1f0      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0xe8>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d063      	beq.n	800433a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004272:	4b65      	ldr	r3, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427e:	4b62      	ldr	r3, [pc, #392]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004286:	2b08      	cmp	r3, #8
 8004288:	d11c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	4b5c      	ldr	r3, [pc, #368]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1c4      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4952      	ldr	r1, [pc, #328]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	e03a      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_OscConfig+0x2b0>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fe faf3 	bl	80028bc <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7fe faef 	bl	80028bc <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1a5      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4940      	ldr	r1, [pc, #256]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_OscConfig+0x2b0>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe fad2 	bl	80028bc <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431c:	f7fe face 	bl	80028bc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e184      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d030      	beq.n	80043a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d016      	beq.n	800437c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <HAL_RCC_OscConfig+0x2b4>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fe fab2 	bl	80028bc <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435c:	f7fe faae 	bl	80028bc <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e164      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x200>
 800437a:	e015      	b.n	80043a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437c:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_OscConfig+0x2b4>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004382:	f7fe fa9b 	bl	80028bc <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438a:	f7fe fa97 	bl	80028bc <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e14d      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439c:	4b1a      	ldr	r3, [pc, #104]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 800439e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80a0 	beq.w	80044f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2300      	movs	r3, #0
 80043b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x2b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d121      	bne.n	8004436 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x2b8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a07      	ldr	r2, [pc, #28]	; (8004414 <HAL_RCC_OscConfig+0x2b8>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fe:	f7fe fa5d 	bl	80028bc <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	e011      	b.n	800442a <HAL_RCC_OscConfig+0x2ce>
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	42470000 	.word	0x42470000
 8004410:	42470e80 	.word	0x42470e80
 8004414:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004418:	f7fe fa50 	bl	80028bc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e106      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	4b85      	ldr	r3, [pc, #532]	; (8004640 <HAL_RCC_OscConfig+0x4e4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d106      	bne.n	800444c <HAL_RCC_OscConfig+0x2f0>
 800443e:	4b81      	ldr	r3, [pc, #516]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a80      	ldr	r2, [pc, #512]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
 800444a:	e01c      	b.n	8004486 <HAL_RCC_OscConfig+0x32a>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b05      	cmp	r3, #5
 8004452:	d10c      	bne.n	800446e <HAL_RCC_OscConfig+0x312>
 8004454:	4b7b      	ldr	r3, [pc, #492]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	4a7a      	ldr	r2, [pc, #488]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 800445a:	f043 0304 	orr.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	; 0x70
 8004460:	4b78      	ldr	r3, [pc, #480]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a77      	ldr	r2, [pc, #476]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	e00b      	b.n	8004486 <HAL_RCC_OscConfig+0x32a>
 800446e:	4b75      	ldr	r3, [pc, #468]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4a74      	ldr	r2, [pc, #464]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	6713      	str	r3, [r2, #112]	; 0x70
 800447a:	4b72      	ldr	r3, [pc, #456]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a71      	ldr	r2, [pc, #452]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d015      	beq.n	80044ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fe fa15 	bl	80028bc <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004494:	e00a      	b.n	80044ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004496:	f7fe fa11 	bl	80028bc <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0c5      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ac:	4b65      	ldr	r3, [pc, #404]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ee      	beq.n	8004496 <HAL_RCC_OscConfig+0x33a>
 80044b8:	e014      	b.n	80044e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ba:	f7fe f9ff 	bl	80028bc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fe f9fb 	bl	80028bc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0af      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d8:	4b5a      	ldr	r3, [pc, #360]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ee      	bne.n	80044c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044e4:	7dfb      	ldrb	r3, [r7, #23]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ea:	4b56      	ldr	r3, [pc, #344]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	4a55      	ldr	r2, [pc, #340]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 809b 	beq.w	8004636 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004500:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	d05c      	beq.n	80045c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d141      	bne.n	8004598 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004514:	4b4c      	ldr	r3, [pc, #304]	; (8004648 <HAL_RCC_OscConfig+0x4ec>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fe f9cf 	bl	80028bc <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004522:	f7fe f9cb 	bl	80028bc <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e081      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	019b      	lsls	r3, r3, #6
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	3b01      	subs	r3, #1
 800455a:	041b      	lsls	r3, r3, #16
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	4937      	ldr	r1, [pc, #220]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456a:	4b37      	ldr	r3, [pc, #220]	; (8004648 <HAL_RCC_OscConfig+0x4ec>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe f9a4 	bl	80028bc <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004578:	f7fe f9a0 	bl	80028bc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e056      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458a:	4b2e      	ldr	r3, [pc, #184]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x41c>
 8004596:	e04e      	b.n	8004636 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_RCC_OscConfig+0x4ec>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fe f98d 	bl	80028bc <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fe f989 	bl	80028bc <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e03f      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b8:	4b22      	ldr	r3, [pc, #136]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x44a>
 80045c4:	e037      	b.n	8004636 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e032      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_RCC_OscConfig+0x4e8>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d028      	beq.n	8004632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d121      	bne.n	8004632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d11a      	bne.n	8004632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004602:	4013      	ands	r3, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004608:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460a:	4293      	cmp	r3, r2
 800460c:	d111      	bne.n	8004632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	3b01      	subs	r3, #1
 800461c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d107      	bne.n	8004632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40007000 	.word	0x40007000
 8004644:	40023800 	.word	0x40023800
 8004648:	42470060 	.word	0x42470060

0800464c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0cc      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b68      	ldr	r3, [pc, #416]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d90c      	bls.n	8004688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0b8      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a52      	ldr	r2, [pc, #328]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	494d      	ldr	r1, [pc, #308]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d044      	beq.n	800476c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d119      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d003      	beq.n	800470a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004706:	2b03      	cmp	r3, #3
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e06f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e067      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4934      	ldr	r1, [pc, #208]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800473c:	f7fe f8be 	bl	80028bc <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fe f8ba 	bl	80028bc <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e04f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800476c:	4b25      	ldr	r3, [pc, #148]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d20c      	bcs.n	8004794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b22      	ldr	r3, [pc, #136]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e032      	b.n	80047fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4916      	ldr	r1, [pc, #88]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	490e      	ldr	r1, [pc, #56]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047d2:	f000 f821 	bl	8004818 <HAL_RCC_GetSysClockFreq>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	490a      	ldr	r1, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	5ccb      	ldrb	r3, [r1, r3]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fe f81e 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40023c00 	.word	0x40023c00
 8004808:	40023800 	.word	0x40023800
 800480c:	08007298 	.word	0x08007298
 8004810:	20000008 	.word	0x20000008
 8004814:	2000000c 	.word	0x2000000c

08004818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	2300      	movs	r3, #0
 800482a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004830:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 030c 	and.w	r3, r3, #12
 8004838:	2b08      	cmp	r3, #8
 800483a:	d00d      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x40>
 800483c:	2b08      	cmp	r3, #8
 800483e:	f200 80bd 	bhi.w	80049bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x34>
 8004846:	2b04      	cmp	r3, #4
 8004848:	d003      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0x3a>
 800484a:	e0b7      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800484c:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800484e:	60bb      	str	r3, [r7, #8]
       break;
 8004850:	e0b7      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004852:	4b61      	ldr	r3, [pc, #388]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004854:	60bb      	str	r3, [r7, #8]
      break;
 8004856:	e0b4      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004858:	4b5d      	ldr	r3, [pc, #372]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004860:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004862:	4b5b      	ldr	r3, [pc, #364]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d04d      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800486e:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	099b      	lsrs	r3, r3, #6
 8004874:	461a      	mov	r2, r3
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800487e:	f04f 0100 	mov.w	r1, #0
 8004882:	ea02 0800 	and.w	r8, r2, r0
 8004886:	ea03 0901 	and.w	r9, r3, r1
 800488a:	4640      	mov	r0, r8
 800488c:	4649      	mov	r1, r9
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	014b      	lsls	r3, r1, #5
 8004898:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800489c:	0142      	lsls	r2, r0, #5
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	ebb0 0008 	subs.w	r0, r0, r8
 80048a6:	eb61 0109 	sbc.w	r1, r1, r9
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	018b      	lsls	r3, r1, #6
 80048b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048b8:	0182      	lsls	r2, r0, #6
 80048ba:	1a12      	subs	r2, r2, r0
 80048bc:	eb63 0301 	sbc.w	r3, r3, r1
 80048c0:	f04f 0000 	mov.w	r0, #0
 80048c4:	f04f 0100 	mov.w	r1, #0
 80048c8:	00d9      	lsls	r1, r3, #3
 80048ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048ce:	00d0      	lsls	r0, r2, #3
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	eb12 0208 	adds.w	r2, r2, r8
 80048d8:	eb43 0309 	adc.w	r3, r3, r9
 80048dc:	f04f 0000 	mov.w	r0, #0
 80048e0:	f04f 0100 	mov.w	r1, #0
 80048e4:	0259      	lsls	r1, r3, #9
 80048e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048ea:	0250      	lsls	r0, r2, #9
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f7fc f994 	bl	8000c28 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e04a      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	099b      	lsrs	r3, r3, #6
 8004910:	461a      	mov	r2, r3
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	ea02 0400 	and.w	r4, r2, r0
 8004922:	ea03 0501 	and.w	r5, r3, r1
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	014b      	lsls	r3, r1, #5
 8004934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004938:	0142      	lsls	r2, r0, #5
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	1b00      	subs	r0, r0, r4
 8004940:	eb61 0105 	sbc.w	r1, r1, r5
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	018b      	lsls	r3, r1, #6
 800494e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004952:	0182      	lsls	r2, r0, #6
 8004954:	1a12      	subs	r2, r2, r0
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	f04f 0000 	mov.w	r0, #0
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	00d9      	lsls	r1, r3, #3
 8004964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004968:	00d0      	lsls	r0, r2, #3
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	1912      	adds	r2, r2, r4
 8004970:	eb45 0303 	adc.w	r3, r5, r3
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	0299      	lsls	r1, r3, #10
 800497e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004982:	0290      	lsls	r0, r2, #10
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	f7fc f948 	bl	8000c28 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	60bb      	str	r3, [r7, #8]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049be:	60bb      	str	r3, [r7, #8]
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	68bb      	ldr	r3, [r7, #8]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	00f42400 	.word	0x00f42400
 80049d8:	007a1200 	.word	0x007a1200

080049dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e2:	681b      	ldr	r3, [r3, #0]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000008 	.word	0x20000008

080049f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049f8:	f7ff fff0 	bl	80049dc <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0a9b      	lsrs	r3, r3, #10
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4903      	ldr	r1, [pc, #12]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40023800 	.word	0x40023800
 8004a18:	080072a8 	.word	0x080072a8

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a20:	f7ff ffdc 	bl	80049dc <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0b5b      	lsrs	r3, r3, #13
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4903      	ldr	r1, [pc, #12]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	080072a8 	.word	0x080072a8

08004a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07b      	b.n	8004b4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d108      	bne.n	8004a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a66:	d009      	beq.n	8004a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	61da      	str	r2, [r3, #28]
 8004a6e:	e005      	b.n	8004a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fd fcf6 	bl	8002488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	ea42 0103 	orr.w	r1, r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	f003 0104 	and.w	r1, r3, #4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f003 0210 	and.w	r2, r3, #16
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_SPI_Transmit_IT+0x20>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e06f      	b.n	8004c58 <HAL_SPI_Transmit_IT+0x100>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Transmit_IT+0x34>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b90:	e05d      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d002      	beq.n	8004ba4 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ba2:	e054      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2203      	movs	r2, #3
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_SPI_Transmit_IT+0x10c>)
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
 8004bea:	e002      	b.n	8004bf2 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_SPI_Transmit_IT+0x110>)
 8004bf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bfa:	d10f      	bne.n	8004c1c <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004c2a:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d008      	beq.n	8004c4c <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004c4c:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	08004eef 	.word	0x08004eef
 8004c68:	08004ea9 	.word	0x08004ea9

08004c6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	099b      	lsrs	r3, r3, #6
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
    return;
 8004cae:	e0d7      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_SPI_IRQHandler+0x66>
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	09db      	lsrs	r3, r3, #7
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
    return;
 8004cd0:	e0c6      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_SPI_IRQHandler+0x8c>
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	099b      	lsrs	r3, r3, #6
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80b4 	beq.w	8004e60 <HAL_SPI_IRQHandler+0x1f4>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80ad 	beq.w	8004e60 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d023      	beq.n	8004d5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d011      	beq.n	8004d42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f043 0204 	orr.w	r2, r3, #4
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	e00b      	b.n	8004d5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	693b      	ldr	r3, [r7, #16]
        return;
 8004d58:	e082      	b.n	8004e60 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d014      	beq.n	8004d90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6a:	f043 0201 	orr.w	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	f043 0208 	orr.w	r2, r3, #8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d04f      	beq.n	8004e5e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004dcc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <HAL_SPI_IRQHandler+0x17e>
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d034      	beq.n	8004e54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0203 	bic.w	r2, r2, #3
 8004df8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d011      	beq.n	8004e26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_SPI_IRQHandler+0x1fc>)
 8004e08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fd3e 	bl	8003890 <HAL_DMA_Abort_IT>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <HAL_SPI_IRQHandler+0x1fc>)
 8004e34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fd28 	bl	8003890 <HAL_DMA_Abort_IT>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e52:	e003      	b.n	8004e5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f809 	bl	8004e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e5a:	e000      	b.n	8004e5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e5c:	bf00      	nop
    return;
 8004e5e:	bf00      	nop
  }
}
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	08004e81 	.word	0x08004e81

08004e6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff ffe6 	bl	8004e6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	7812      	ldrb	r2, [r2, #0]
 8004ebc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8f1 	bl	80050c8 <SPI_CloseTx_ISR>
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b082      	sub	sp, #8
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	1c9a      	adds	r2, r3, #2
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8cf 	bl	80050c8 <SPI_CloseTx_ISR>
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f44:	f7fd fcba 	bl	80028bc <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	4413      	add	r3, r2
 8004f52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f54:	f7fd fcb2 	bl	80028bc <HAL_GetTick>
 8004f58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f5a:	4b39      	ldr	r3, [pc, #228]	; (8005040 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	015b      	lsls	r3, r3, #5
 8004f60:	0d1b      	lsrs	r3, r3, #20
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	e054      	b.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d050      	beq.n	8005016 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f74:	f7fd fca2 	bl	80028bc <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d902      	bls.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d13d      	bne.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa2:	d111      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fac:	d004      	beq.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb6:	d107      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd0:	d10f      	bne.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ff0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e017      	b.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3b01      	subs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	429a      	cmp	r2, r3
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	429a      	cmp	r2, r3
 8005032:	d19b      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000008 	.word	0x20000008

08005044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <SPI_EndRxTxTransaction+0x7c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <SPI_EndRxTxTransaction+0x80>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	0d5b      	lsrs	r3, r3, #21
 800505c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005060:	fb02 f303 	mul.w	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506e:	d112      	bne.n	8005096 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2200      	movs	r2, #0
 8005078:	2180      	movs	r1, #128	; 0x80
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff ff5a 	bl	8004f34 <SPI_WaitFlagStateUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e00f      	b.n	80050b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3b01      	subs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d0f2      	beq.n	8005096 <SPI_EndRxTxTransaction+0x52>
 80050b0:	e000      	b.n	80050b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80050b2:	bf00      	nop
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000008 	.word	0x20000008
 80050c4:	165e9f81 	.word	0x165e9f81

080050c8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80050d0:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <SPI_CloseTx_ISR+0xbc>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2c      	ldr	r2, [pc, #176]	; (8005188 <SPI_CloseTx_ISR+0xc0>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0a5b      	lsrs	r3, r3, #9
 80050dc:	2264      	movs	r2, #100	; 0x64
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050e4:	f7fd fbea 	bl	80028bc <HAL_GetTick>
 80050e8:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050fc:	e009      	b.n	8005112 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	3b01      	subs	r3, #1
 8005102:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0eb      	beq.n	80050ea <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005120:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	2164      	movs	r1, #100	; 0x64
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ff8c 	bl	8005044 <SPI_EndRxTxTransaction>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fe7d 	bl	8004e6c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005172:	e002      	b.n	800517a <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fd f88b 	bl	8002290 <HAL_SPI_TxCpltCallback>
}
 800517a:	bf00      	nop
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008
 8005188:	057619f1 	.word	0x057619f1

0800518c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e041      	b.n	8005222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fd f9b8 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f000 fade 	bl	800578c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b01      	cmp	r3, #1
 800523e:	d001      	beq.n	8005244 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e03c      	b.n	80052be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <HAL_TIM_Base_Start+0xa0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d018      	beq.n	8005288 <HAL_TIM_Base_Start+0x5c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525e:	d013      	beq.n	8005288 <HAL_TIM_Base_Start+0x5c>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <HAL_TIM_Base_Start+0xa4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00e      	beq.n	8005288 <HAL_TIM_Base_Start+0x5c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_TIM_Base_Start+0xa8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d009      	beq.n	8005288 <HAL_TIM_Base_Start+0x5c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <HAL_TIM_Base_Start+0xac>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <HAL_TIM_Base_Start+0x5c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a16      	ldr	r2, [pc, #88]	; (80052dc <HAL_TIM_Base_Start+0xb0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d111      	bne.n	80052ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b06      	cmp	r3, #6
 8005298:	d010      	beq.n	80052bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052aa:	e007      	b.n	80052bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40014000 	.word	0x40014000

080052e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d001      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e044      	b.n	8005382 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1e      	ldr	r2, [pc, #120]	; (8005390 <HAL_TIM_Base_Start_IT+0xb0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d018      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x6c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005322:	d013      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x6c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <HAL_TIM_Base_Start_IT+0xb4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x6c>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a19      	ldr	r2, [pc, #100]	; (8005398 <HAL_TIM_Base_Start_IT+0xb8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x6c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_TIM_Base_Start_IT+0xbc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIM_Base_Start_IT+0x6c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d111      	bne.n	8005370 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b06      	cmp	r3, #6
 800535c:	d010      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0201 	orr.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536e:	e007      	b.n	8005380 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40014000 	.word	0x40014000

080053a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d122      	bne.n	8005400 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d11b      	bne.n	8005400 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0202 	mvn.w	r2, #2
 80053d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9b2 	bl	8005750 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9a4 	bl	800573c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f9b5 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b04      	cmp	r3, #4
 800540c:	d122      	bne.n	8005454 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0204 	mvn.w	r2, #4
 8005424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f988 	bl	8005750 <HAL_TIM_IC_CaptureCallback>
 8005440:	e005      	b.n	800544e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f97a 	bl	800573c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f98b 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b08      	cmp	r3, #8
 8005460:	d122      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b08      	cmp	r3, #8
 800546e:	d11b      	bne.n	80054a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0208 	mvn.w	r2, #8
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2204      	movs	r2, #4
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f95e 	bl	8005750 <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f950 	bl	800573c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f961 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d122      	bne.n	80054fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0310 	and.w	r3, r3, #16
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0210 	mvn.w	r2, #16
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2208      	movs	r2, #8
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f934 	bl	8005750 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f926 	bl	800573c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f937 	bl	8005764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d10e      	bne.n	8005528 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d107      	bne.n	8005528 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0201 	mvn.w	r2, #1
 8005520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fc feca 	bl	80022bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b80      	cmp	r3, #128	; 0x80
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005540:	2b80      	cmp	r3, #128	; 0x80
 8005542:	d107      	bne.n	8005554 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 faae 	bl	8005ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	d10e      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f8fc 	bl	8005778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b20      	cmp	r3, #32
 800558c:	d10e      	bne.n	80055ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0320 	and.w	r3, r3, #32
 8005598:	2b20      	cmp	r3, #32
 800559a:	d107      	bne.n	80055ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0220 	mvn.w	r2, #32
 80055a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa78 	bl	8005a9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_ConfigClockSource+0x18>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e0b3      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x180>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005604:	d03e      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0xd0>
 8005606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560a:	f200 8087 	bhi.w	800571c <HAL_TIM_ConfigClockSource+0x168>
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005612:	f000 8085 	beq.w	8005720 <HAL_TIM_ConfigClockSource+0x16c>
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	d87f      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x168>
 800561c:	2b70      	cmp	r3, #112	; 0x70
 800561e:	d01a      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0xa2>
 8005620:	2b70      	cmp	r3, #112	; 0x70
 8005622:	d87b      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x168>
 8005624:	2b60      	cmp	r3, #96	; 0x60
 8005626:	d050      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x116>
 8005628:	2b60      	cmp	r3, #96	; 0x60
 800562a:	d877      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x168>
 800562c:	2b50      	cmp	r3, #80	; 0x50
 800562e:	d03c      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0xf6>
 8005630:	2b50      	cmp	r3, #80	; 0x50
 8005632:	d873      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x168>
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d058      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0x136>
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	d86f      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x168>
 800563c:	2b30      	cmp	r3, #48	; 0x30
 800563e:	d064      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x156>
 8005640:	2b30      	cmp	r3, #48	; 0x30
 8005642:	d86b      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x168>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d060      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x156>
 8005648:	2b20      	cmp	r3, #32
 800564a:	d867      	bhi.n	800571c <HAL_TIM_ConfigClockSource+0x168>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d05c      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x156>
 8005650:	2b10      	cmp	r3, #16
 8005652:	d05a      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005654:	e062      	b.n	800571c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6899      	ldr	r1, [r3, #8]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f000 f98b 	bl	8005980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005678:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	609a      	str	r2, [r3, #8]
      break;
 8005682:	e04e      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f000 f974 	bl	8005980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a6:	609a      	str	r2, [r3, #8]
      break;
 80056a8:	e03b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 f8e8 	bl	800588c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2150      	movs	r1, #80	; 0x50
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 f941 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 80056c8:	e02b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6818      	ldr	r0, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	6859      	ldr	r1, [r3, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f000 f907 	bl	80058ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2160      	movs	r1, #96	; 0x60
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f931 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 80056e8:	e01b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f000 f8c8 	bl	800588c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2140      	movs	r1, #64	; 0x40
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f921 	bl	800594a <TIM_ITRx_SetConfig>
      break;
 8005708:	e00b      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f000 f918 	bl	800594a <TIM_ITRx_SetConfig>
        break;
 800571a:	e002      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005720:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a34      	ldr	r2, [pc, #208]	; (8005870 <TIM_Base_SetConfig+0xe4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_Base_SetConfig+0x38>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d00b      	beq.n	80057c4 <TIM_Base_SetConfig+0x38>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a31      	ldr	r2, [pc, #196]	; (8005874 <TIM_Base_SetConfig+0xe8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_Base_SetConfig+0x38>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a30      	ldr	r2, [pc, #192]	; (8005878 <TIM_Base_SetConfig+0xec>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0x38>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a2f      	ldr	r2, [pc, #188]	; (800587c <TIM_Base_SetConfig+0xf0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d108      	bne.n	80057d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a25      	ldr	r2, [pc, #148]	; (8005870 <TIM_Base_SetConfig+0xe4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d01b      	beq.n	8005816 <TIM_Base_SetConfig+0x8a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e4:	d017      	beq.n	8005816 <TIM_Base_SetConfig+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a22      	ldr	r2, [pc, #136]	; (8005874 <TIM_Base_SetConfig+0xe8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <TIM_Base_SetConfig+0x8a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a21      	ldr	r2, [pc, #132]	; (8005878 <TIM_Base_SetConfig+0xec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00f      	beq.n	8005816 <TIM_Base_SetConfig+0x8a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a20      	ldr	r2, [pc, #128]	; (800587c <TIM_Base_SetConfig+0xf0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00b      	beq.n	8005816 <TIM_Base_SetConfig+0x8a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1f      	ldr	r2, [pc, #124]	; (8005880 <TIM_Base_SetConfig+0xf4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <TIM_Base_SetConfig+0x8a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <TIM_Base_SetConfig+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_Base_SetConfig+0x8a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <TIM_Base_SetConfig+0xfc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d108      	bne.n	8005828 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a08      	ldr	r2, [pc, #32]	; (8005870 <TIM_Base_SetConfig+0xe4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d103      	bne.n	800585c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	615a      	str	r2, [r3, #20]
}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40010000 	.word	0x40010000
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800
 800587c:	40000c00 	.word	0x40000c00
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800

0800588c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f023 030a 	bic.w	r3, r3, #10
 80058c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b087      	sub	sp, #28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f023 0210 	bic.w	r2, r3, #16
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	031b      	lsls	r3, r3, #12
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	f043 0307 	orr.w	r3, r3, #7
 800596c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	609a      	str	r2, [r3, #8]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800599a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	021a      	lsls	r2, r3, #8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e050      	b.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d018      	beq.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d013      	beq.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00e      	beq.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d009      	beq.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d004      	beq.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a13      	ldr	r2, [pc, #76]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d10c      	bne.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	40014000 	.word	0x40014000

08005a9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e03f      	b.n	8005b56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc fd5a 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	; 0x24
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc7b 	bl	8006404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b08a      	sub	sp, #40	; 0x28
 8005b62:	af02      	add	r7, sp, #8
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	603b      	str	r3, [r7, #0]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d17c      	bne.n	8005c78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_UART_Transmit+0x2c>
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e075      	b.n	8005c7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_UART_Transmit+0x3e>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e06e      	b.n	8005c7a <HAL_UART_Transmit+0x11c>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2221      	movs	r2, #33	; 0x21
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb2:	f7fc fe83 	bl	80028bc <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	d108      	bne.n	8005be0 <HAL_UART_Transmit+0x82>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e003      	b.n	8005be8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bf0:	e02a      	b.n	8005c48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2180      	movs	r1, #128	; 0x80
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fa3d 	bl	800607c <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e036      	b.n	8005c7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10b      	bne.n	8005c2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	3302      	adds	r3, #2
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	e007      	b.n	8005c3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	781a      	ldrb	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	3301      	adds	r3, #1
 8005c38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1cf      	bne.n	8005bf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2140      	movs	r1, #64	; 0x40
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fa0d 	bl	800607c <UART_WaitOnFlagUntilTimeout>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e006      	b.n	8005c7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d11d      	bne.n	8005cd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_UART_Receive_IT+0x26>
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e016      	b.n	8005cda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_UART_Receive_IT+0x38>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e00f      	b.n	8005cda <HAL_UART_Receive_IT+0x58>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fa1e 	bl	8006110 <UART_Start_Receive_IT>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	e000      	b.n	8005cda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005cd8:	2302      	movs	r3, #2
  }
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	; 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_UART_IRQHandler+0x52>
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fad1 	bl	80062d6 <UART_Receive_IT>
      return;
 8005d34:	e17c      	b.n	8006030 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80b1 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x1bc>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <HAL_UART_IRQHandler+0x70>
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 80a6 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_UART_IRQHandler+0x90>
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	f043 0201 	orr.w	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_UART_IRQHandler+0xb0>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f043 0202 	orr.w	r2, r3, #2
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_UART_IRQHandler+0xd0>
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	f043 0204 	orr.w	r2, r3, #4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00f      	beq.n	8005dde <HAL_UART_IRQHandler+0xfa>
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <HAL_UART_IRQHandler+0xee>
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 811f 	beq.w	8006026 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <HAL_UART_IRQHandler+0x11e>
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fa6a 	bl	80062d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d102      	bne.n	8005e2a <HAL_UART_IRQHandler+0x146>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d031      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f9aa 	bl	8006184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b40      	cmp	r3, #64	; 0x40
 8005e3c:	d123      	bne.n	8005e86 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695a      	ldr	r2, [r3, #20]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d013      	beq.n	8005e7e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	4a77      	ldr	r2, [pc, #476]	; (8006038 <HAL_UART_IRQHandler+0x354>)
 8005e5c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fd fd14 	bl	8003890 <HAL_DMA_Abort_IT>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d016      	beq.n	8005e9c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	e00e      	b.n	8005e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f8e6 	bl	8006050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	e00a      	b.n	8005e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8e2 	bl	8006050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	e006      	b.n	8005e9c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f8de 	bl	8006050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e9a:	e0c4      	b.n	8006026 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9c:	bf00      	nop
    return;
 8005e9e:	e0c2      	b.n	8006026 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	f040 80a2 	bne.w	8005fee <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 809c 	beq.w	8005fee <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8096 	beq.w	8005fee <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b40      	cmp	r3, #64	; 0x40
 8005ee4:	d14f      	bne.n	8005f86 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005ef0:	8a3b      	ldrh	r3, [r7, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8099 	beq.w	800602a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005efc:	8a3a      	ldrh	r2, [r7, #16]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	f080 8093 	bcs.w	800602a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	8a3a      	ldrh	r2, [r7, #16]
 8005f08:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f14:	d02b      	beq.n	8005f6e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f24:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695a      	ldr	r2, [r3, #20]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f44:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0210 	bic.w	r2, r2, #16
 8005f62:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd fc21 	bl	80037b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f870 	bl	8006064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005f84:	e051      	b.n	800602a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d047      	beq.n	800602e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005f9e:	8a7b      	ldrh	r3, [r7, #18]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d044      	beq.n	800602e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fb2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0210 	bic.w	r2, r2, #16
 8005fe0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fe2:	8a7b      	ldrh	r3, [r7, #18]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f83c 	bl	8006064 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005fec:	e01f      	b.n	800602e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_UART_IRQHandler+0x326>
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8ff 	bl	8006206 <UART_Transmit_IT>
    return;
 8006008:	e012      	b.n	8006030 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00d      	beq.n	8006030 <HAL_UART_IRQHandler+0x34c>
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f941 	bl	80062a6 <UART_EndTransmit_IT>
    return;
 8006024:	e004      	b.n	8006030 <HAL_UART_IRQHandler+0x34c>
    return;
 8006026:	bf00      	nop
 8006028:	e002      	b.n	8006030 <HAL_UART_IRQHandler+0x34c>
      return;
 800602a:	bf00      	nop
 800602c:	e000      	b.n	8006030 <HAL_UART_IRQHandler+0x34c>
      return;
 800602e:	bf00      	nop
  }
}
 8006030:	3728      	adds	r7, #40	; 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	080061df 	.word	0x080061df

0800603c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608c:	e02c      	b.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d028      	beq.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d007      	beq.n	80060ac <UART_WaitOnFlagUntilTimeout+0x30>
 800609c:	f7fc fc0e 	bl	80028bc <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d21d      	bcs.n	80060e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0201 	bic.w	r2, r2, #1
 80060ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e00f      	b.n	8006108 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4013      	ands	r3, r2
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	bf0c      	ite	eq
 80060f8:	2301      	moveq	r3, #1
 80060fa:	2300      	movne	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	429a      	cmp	r2, r3
 8006104:	d0c3      	beq.n	800608e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	4613      	mov	r3, r2
 800611c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	88fa      	ldrh	r2, [r7, #6]
 8006128:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	88fa      	ldrh	r2, [r7, #6]
 800612e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2222      	movs	r2, #34	; 0x22
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006154:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0201 	orr.w	r2, r2, #1
 8006164:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0220 	orr.w	r2, r2, #32
 8006174:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800619a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0201 	bic.w	r2, r2, #1
 80061aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d107      	bne.n	80061c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0210 	bic.w	r2, r2, #16
 80061c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7ff ff29 	bl	8006050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006206:	b480      	push	{r7}
 8006208:	b085      	sub	sp, #20
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b21      	cmp	r3, #33	; 0x21
 8006218:	d13e      	bne.n	8006298 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d114      	bne.n	800624e <UART_Transmit_IT+0x48>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d110      	bne.n	800624e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006240:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	621a      	str	r2, [r3, #32]
 800624c:	e008      	b.n	8006260 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6211      	str	r1, [r2, #32]
 8006258:	781a      	ldrb	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29b      	uxth	r3, r3
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4619      	mov	r1, r3
 800626e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006270:	2b00      	cmp	r3, #0
 8006272:	d10f      	bne.n	8006294 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006282:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006292:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff feb8 	bl	800603c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b22      	cmp	r3, #34	; 0x22
 80062e8:	f040 8087 	bne.w	80063fa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f4:	d117      	bne.n	8006326 <UART_Receive_IT+0x50>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d113      	bne.n	8006326 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006306:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006314:	b29a      	uxth	r2, r3
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	1c9a      	adds	r2, r3, #2
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28
 8006324:	e026      	b.n	8006374 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006338:	d007      	beq.n	800634a <UART_Receive_IT+0x74>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <UART_Receive_IT+0x82>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e008      	b.n	800636a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29b      	uxth	r3, r3
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4619      	mov	r1, r3
 8006382:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006384:	2b00      	cmp	r3, #0
 8006386:	d136      	bne.n	80063f6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0220 	bic.w	r2, r2, #32
 8006396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d10e      	bne.n	80063e6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0210 	bic.w	r2, r2, #16
 80063d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fe40 	bl	8006064 <HAL_UARTEx_RxEventCallback>
 80063e4:	e002      	b.n	80063ec <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fb ff0c 	bl	8002204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e002      	b.n	80063fc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e000      	b.n	80063fc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80063fa:	2302      	movs	r3, #2
  }
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006408:	b09f      	sub	sp, #124	; 0x7c
 800640a:	af00      	add	r7, sp, #0
 800640c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800640e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641a:	68d9      	ldr	r1, [r3, #12]
 800641c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	ea40 0301 	orr.w	r3, r0, r1
 8006424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	431a      	orrs	r2, r3
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	431a      	orrs	r2, r3
 8006436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	4313      	orrs	r3, r2
 800643c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006448:	f021 010c 	bic.w	r1, r1, #12
 800644c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006452:	430b      	orrs	r3, r1
 8006454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006462:	6999      	ldr	r1, [r3, #24]
 8006464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	ea40 0301 	orr.w	r3, r0, r1
 800646c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800646e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	4bc5      	ldr	r3, [pc, #788]	; (8006788 <UART_SetConfig+0x384>)
 8006474:	429a      	cmp	r2, r3
 8006476:	d004      	beq.n	8006482 <UART_SetConfig+0x7e>
 8006478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4bc3      	ldr	r3, [pc, #780]	; (800678c <UART_SetConfig+0x388>)
 800647e:	429a      	cmp	r2, r3
 8006480:	d103      	bne.n	800648a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006482:	f7fe facb 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8006486:	6778      	str	r0, [r7, #116]	; 0x74
 8006488:	e002      	b.n	8006490 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800648a:	f7fe fab3 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 800648e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006498:	f040 80b6 	bne.w	8006608 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800649c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800649e:	461c      	mov	r4, r3
 80064a0:	f04f 0500 	mov.w	r5, #0
 80064a4:	4622      	mov	r2, r4
 80064a6:	462b      	mov	r3, r5
 80064a8:	1891      	adds	r1, r2, r2
 80064aa:	6439      	str	r1, [r7, #64]	; 0x40
 80064ac:	415b      	adcs	r3, r3
 80064ae:	647b      	str	r3, [r7, #68]	; 0x44
 80064b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064b4:	1912      	adds	r2, r2, r4
 80064b6:	eb45 0303 	adc.w	r3, r5, r3
 80064ba:	f04f 0000 	mov.w	r0, #0
 80064be:	f04f 0100 	mov.w	r1, #0
 80064c2:	00d9      	lsls	r1, r3, #3
 80064c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064c8:	00d0      	lsls	r0, r2, #3
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	1911      	adds	r1, r2, r4
 80064d0:	6639      	str	r1, [r7, #96]	; 0x60
 80064d2:	416b      	adcs	r3, r5
 80064d4:	667b      	str	r3, [r7, #100]	; 0x64
 80064d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	461a      	mov	r2, r3
 80064dc:	f04f 0300 	mov.w	r3, #0
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80064e4:	415b      	adcs	r3, r3
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80064f0:	f7fa fb9a 	bl	8000c28 <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4ba5      	ldr	r3, [pc, #660]	; (8006790 <UART_SetConfig+0x38c>)
 80064fa:	fba3 2302 	umull	r2, r3, r3, r2
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	011e      	lsls	r6, r3, #4
 8006502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006504:	461c      	mov	r4, r3
 8006506:	f04f 0500 	mov.w	r5, #0
 800650a:	4622      	mov	r2, r4
 800650c:	462b      	mov	r3, r5
 800650e:	1891      	adds	r1, r2, r2
 8006510:	6339      	str	r1, [r7, #48]	; 0x30
 8006512:	415b      	adcs	r3, r3
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
 8006516:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800651a:	1912      	adds	r2, r2, r4
 800651c:	eb45 0303 	adc.w	r3, r5, r3
 8006520:	f04f 0000 	mov.w	r0, #0
 8006524:	f04f 0100 	mov.w	r1, #0
 8006528:	00d9      	lsls	r1, r3, #3
 800652a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800652e:	00d0      	lsls	r0, r2, #3
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	1911      	adds	r1, r2, r4
 8006536:	65b9      	str	r1, [r7, #88]	; 0x58
 8006538:	416b      	adcs	r3, r5
 800653a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800653c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	461a      	mov	r2, r3
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	1891      	adds	r1, r2, r2
 8006548:	62b9      	str	r1, [r7, #40]	; 0x28
 800654a:	415b      	adcs	r3, r3
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006552:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006556:	f7fa fb67 	bl	8000c28 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4b8c      	ldr	r3, [pc, #560]	; (8006790 <UART_SetConfig+0x38c>)
 8006560:	fba3 1302 	umull	r1, r3, r3, r2
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	2164      	movs	r1, #100	; 0x64
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	3332      	adds	r3, #50	; 0x32
 8006572:	4a87      	ldr	r2, [pc, #540]	; (8006790 <UART_SetConfig+0x38c>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006580:	441e      	add	r6, r3
 8006582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006584:	4618      	mov	r0, r3
 8006586:	f04f 0100 	mov.w	r1, #0
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	1894      	adds	r4, r2, r2
 8006590:	623c      	str	r4, [r7, #32]
 8006592:	415b      	adcs	r3, r3
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
 8006596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800659a:	1812      	adds	r2, r2, r0
 800659c:	eb41 0303 	adc.w	r3, r1, r3
 80065a0:	f04f 0400 	mov.w	r4, #0
 80065a4:	f04f 0500 	mov.w	r5, #0
 80065a8:	00dd      	lsls	r5, r3, #3
 80065aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065ae:	00d4      	lsls	r4, r2, #3
 80065b0:	4622      	mov	r2, r4
 80065b2:	462b      	mov	r3, r5
 80065b4:	1814      	adds	r4, r2, r0
 80065b6:	653c      	str	r4, [r7, #80]	; 0x50
 80065b8:	414b      	adcs	r3, r1
 80065ba:	657b      	str	r3, [r7, #84]	; 0x54
 80065bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	461a      	mov	r2, r3
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	1891      	adds	r1, r2, r2
 80065c8:	61b9      	str	r1, [r7, #24]
 80065ca:	415b      	adcs	r3, r3
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80065d6:	f7fa fb27 	bl	8000c28 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4b6c      	ldr	r3, [pc, #432]	; (8006790 <UART_SetConfig+0x38c>)
 80065e0:	fba3 1302 	umull	r1, r3, r3, r2
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	2164      	movs	r1, #100	; 0x64
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	3332      	adds	r3, #50	; 0x32
 80065f2:	4a67      	ldr	r2, [pc, #412]	; (8006790 <UART_SetConfig+0x38c>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f003 0207 	and.w	r2, r3, #7
 80065fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4432      	add	r2, r6
 8006604:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006606:	e0b9      	b.n	800677c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800660a:	461c      	mov	r4, r3
 800660c:	f04f 0500 	mov.w	r5, #0
 8006610:	4622      	mov	r2, r4
 8006612:	462b      	mov	r3, r5
 8006614:	1891      	adds	r1, r2, r2
 8006616:	6139      	str	r1, [r7, #16]
 8006618:	415b      	adcs	r3, r3
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006620:	1912      	adds	r2, r2, r4
 8006622:	eb45 0303 	adc.w	r3, r5, r3
 8006626:	f04f 0000 	mov.w	r0, #0
 800662a:	f04f 0100 	mov.w	r1, #0
 800662e:	00d9      	lsls	r1, r3, #3
 8006630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006634:	00d0      	lsls	r0, r2, #3
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	eb12 0804 	adds.w	r8, r2, r4
 800663e:	eb43 0905 	adc.w	r9, r3, r5
 8006642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	4618      	mov	r0, r3
 8006648:	f04f 0100 	mov.w	r1, #0
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	008b      	lsls	r3, r1, #2
 8006656:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800665a:	0082      	lsls	r2, r0, #2
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa fae2 	bl	8000c28 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4b49      	ldr	r3, [pc, #292]	; (8006790 <UART_SetConfig+0x38c>)
 800666a:	fba3 2302 	umull	r2, r3, r3, r2
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	011e      	lsls	r6, r3, #4
 8006672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006674:	4618      	mov	r0, r3
 8006676:	f04f 0100 	mov.w	r1, #0
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	1894      	adds	r4, r2, r2
 8006680:	60bc      	str	r4, [r7, #8]
 8006682:	415b      	adcs	r3, r3
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800668a:	1812      	adds	r2, r2, r0
 800668c:	eb41 0303 	adc.w	r3, r1, r3
 8006690:	f04f 0400 	mov.w	r4, #0
 8006694:	f04f 0500 	mov.w	r5, #0
 8006698:	00dd      	lsls	r5, r3, #3
 800669a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800669e:	00d4      	lsls	r4, r2, #3
 80066a0:	4622      	mov	r2, r4
 80066a2:	462b      	mov	r3, r5
 80066a4:	1814      	adds	r4, r2, r0
 80066a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80066a8:	414b      	adcs	r3, r1
 80066aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f04f 0100 	mov.w	r1, #0
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	008b      	lsls	r3, r1, #2
 80066c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066c4:	0082      	lsls	r2, r0, #2
 80066c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80066ca:	f7fa faad 	bl	8000c28 <__aeabi_uldivmod>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4b2f      	ldr	r3, [pc, #188]	; (8006790 <UART_SetConfig+0x38c>)
 80066d4:	fba3 1302 	umull	r1, r3, r3, r2
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	2164      	movs	r1, #100	; 0x64
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	3332      	adds	r3, #50	; 0x32
 80066e6:	4a2a      	ldr	r2, [pc, #168]	; (8006790 <UART_SetConfig+0x38c>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f2:	441e      	add	r6, r3
 80066f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f6:	4618      	mov	r0, r3
 80066f8:	f04f 0100 	mov.w	r1, #0
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	1894      	adds	r4, r2, r2
 8006702:	603c      	str	r4, [r7, #0]
 8006704:	415b      	adcs	r3, r3
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670c:	1812      	adds	r2, r2, r0
 800670e:	eb41 0303 	adc.w	r3, r1, r3
 8006712:	f04f 0400 	mov.w	r4, #0
 8006716:	f04f 0500 	mov.w	r5, #0
 800671a:	00dd      	lsls	r5, r3, #3
 800671c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006720:	00d4      	lsls	r4, r2, #3
 8006722:	4622      	mov	r2, r4
 8006724:	462b      	mov	r3, r5
 8006726:	eb12 0a00 	adds.w	sl, r2, r0
 800672a:	eb43 0b01 	adc.w	fp, r3, r1
 800672e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	4618      	mov	r0, r3
 8006734:	f04f 0100 	mov.w	r1, #0
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	008b      	lsls	r3, r1, #2
 8006742:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006746:	0082      	lsls	r2, r0, #2
 8006748:	4650      	mov	r0, sl
 800674a:	4659      	mov	r1, fp
 800674c:	f7fa fa6c 	bl	8000c28 <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4b0e      	ldr	r3, [pc, #56]	; (8006790 <UART_SetConfig+0x38c>)
 8006756:	fba3 1302 	umull	r1, r3, r3, r2
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	2164      	movs	r1, #100	; 0x64
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	3332      	adds	r3, #50	; 0x32
 8006768:	4a09      	ldr	r2, [pc, #36]	; (8006790 <UART_SetConfig+0x38c>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4432      	add	r2, r6
 800677a:	609a      	str	r2, [r3, #8]
}
 800677c:	bf00      	nop
 800677e:	377c      	adds	r7, #124	; 0x7c
 8006780:	46bd      	mov	sp, r7
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	bf00      	nop
 8006788:	40011000 	.word	0x40011000
 800678c:	40011400 	.word	0x40011400
 8006790:	51eb851f 	.word	0x51eb851f

08006794 <__errno>:
 8006794:	4b01      	ldr	r3, [pc, #4]	; (800679c <__errno+0x8>)
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000014 	.word	0x20000014

080067a0 <__libc_init_array>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4d0d      	ldr	r5, [pc, #52]	; (80067d8 <__libc_init_array+0x38>)
 80067a4:	4c0d      	ldr	r4, [pc, #52]	; (80067dc <__libc_init_array+0x3c>)
 80067a6:	1b64      	subs	r4, r4, r5
 80067a8:	10a4      	asrs	r4, r4, #2
 80067aa:	2600      	movs	r6, #0
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	d109      	bne.n	80067c4 <__libc_init_array+0x24>
 80067b0:	4d0b      	ldr	r5, [pc, #44]	; (80067e0 <__libc_init_array+0x40>)
 80067b2:	4c0c      	ldr	r4, [pc, #48]	; (80067e4 <__libc_init_array+0x44>)
 80067b4:	f000 fc4e 	bl	8007054 <_init>
 80067b8:	1b64      	subs	r4, r4, r5
 80067ba:	10a4      	asrs	r4, r4, #2
 80067bc:	2600      	movs	r6, #0
 80067be:	42a6      	cmp	r6, r4
 80067c0:	d105      	bne.n	80067ce <__libc_init_array+0x2e>
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c8:	4798      	blx	r3
 80067ca:	3601      	adds	r6, #1
 80067cc:	e7ee      	b.n	80067ac <__libc_init_array+0xc>
 80067ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d2:	4798      	blx	r3
 80067d4:	3601      	adds	r6, #1
 80067d6:	e7f2      	b.n	80067be <__libc_init_array+0x1e>
 80067d8:	080072f4 	.word	0x080072f4
 80067dc:	080072f4 	.word	0x080072f4
 80067e0:	080072f4 	.word	0x080072f4
 80067e4:	080072f8 	.word	0x080072f8

080067e8 <memcpy>:
 80067e8:	440a      	add	r2, r1
 80067ea:	4291      	cmp	r1, r2
 80067ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80067f0:	d100      	bne.n	80067f4 <memcpy+0xc>
 80067f2:	4770      	bx	lr
 80067f4:	b510      	push	{r4, lr}
 80067f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067fe:	4291      	cmp	r1, r2
 8006800:	d1f9      	bne.n	80067f6 <memcpy+0xe>
 8006802:	bd10      	pop	{r4, pc}

08006804 <memset>:
 8006804:	4402      	add	r2, r0
 8006806:	4603      	mov	r3, r0
 8006808:	4293      	cmp	r3, r2
 800680a:	d100      	bne.n	800680e <memset+0xa>
 800680c:	4770      	bx	lr
 800680e:	f803 1b01 	strb.w	r1, [r3], #1
 8006812:	e7f9      	b.n	8006808 <memset+0x4>

08006814 <siprintf>:
 8006814:	b40e      	push	{r1, r2, r3}
 8006816:	b500      	push	{lr}
 8006818:	b09c      	sub	sp, #112	; 0x70
 800681a:	ab1d      	add	r3, sp, #116	; 0x74
 800681c:	9002      	str	r0, [sp, #8]
 800681e:	9006      	str	r0, [sp, #24]
 8006820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006824:	4809      	ldr	r0, [pc, #36]	; (800684c <siprintf+0x38>)
 8006826:	9107      	str	r1, [sp, #28]
 8006828:	9104      	str	r1, [sp, #16]
 800682a:	4909      	ldr	r1, [pc, #36]	; (8006850 <siprintf+0x3c>)
 800682c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006830:	9105      	str	r1, [sp, #20]
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	a902      	add	r1, sp, #8
 8006838:	f000 f868 	bl	800690c <_svfiprintf_r>
 800683c:	9b02      	ldr	r3, [sp, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	b01c      	add	sp, #112	; 0x70
 8006844:	f85d eb04 	ldr.w	lr, [sp], #4
 8006848:	b003      	add	sp, #12
 800684a:	4770      	bx	lr
 800684c:	20000014 	.word	0x20000014
 8006850:	ffff0208 	.word	0xffff0208

08006854 <__ssputs_r>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	688e      	ldr	r6, [r1, #8]
 800685a:	429e      	cmp	r6, r3
 800685c:	4682      	mov	sl, r0
 800685e:	460c      	mov	r4, r1
 8006860:	4690      	mov	r8, r2
 8006862:	461f      	mov	r7, r3
 8006864:	d838      	bhi.n	80068d8 <__ssputs_r+0x84>
 8006866:	898a      	ldrh	r2, [r1, #12]
 8006868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800686c:	d032      	beq.n	80068d4 <__ssputs_r+0x80>
 800686e:	6825      	ldr	r5, [r4, #0]
 8006870:	6909      	ldr	r1, [r1, #16]
 8006872:	eba5 0901 	sub.w	r9, r5, r1
 8006876:	6965      	ldr	r5, [r4, #20]
 8006878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800687c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006880:	3301      	adds	r3, #1
 8006882:	444b      	add	r3, r9
 8006884:	106d      	asrs	r5, r5, #1
 8006886:	429d      	cmp	r5, r3
 8006888:	bf38      	it	cc
 800688a:	461d      	movcc	r5, r3
 800688c:	0553      	lsls	r3, r2, #21
 800688e:	d531      	bpl.n	80068f4 <__ssputs_r+0xa0>
 8006890:	4629      	mov	r1, r5
 8006892:	f000 fb39 	bl	8006f08 <_malloc_r>
 8006896:	4606      	mov	r6, r0
 8006898:	b950      	cbnz	r0, 80068b0 <__ssputs_r+0x5c>
 800689a:	230c      	movs	r3, #12
 800689c:	f8ca 3000 	str.w	r3, [sl]
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b0:	6921      	ldr	r1, [r4, #16]
 80068b2:	464a      	mov	r2, r9
 80068b4:	f7ff ff98 	bl	80067e8 <memcpy>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	6126      	str	r6, [r4, #16]
 80068c6:	6165      	str	r5, [r4, #20]
 80068c8:	444e      	add	r6, r9
 80068ca:	eba5 0509 	sub.w	r5, r5, r9
 80068ce:	6026      	str	r6, [r4, #0]
 80068d0:	60a5      	str	r5, [r4, #8]
 80068d2:	463e      	mov	r6, r7
 80068d4:	42be      	cmp	r6, r7
 80068d6:	d900      	bls.n	80068da <__ssputs_r+0x86>
 80068d8:	463e      	mov	r6, r7
 80068da:	4632      	mov	r2, r6
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	4641      	mov	r1, r8
 80068e0:	f000 faa8 	bl	8006e34 <memmove>
 80068e4:	68a3      	ldr	r3, [r4, #8]
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	1b9b      	subs	r3, r3, r6
 80068ea:	4432      	add	r2, r6
 80068ec:	60a3      	str	r3, [r4, #8]
 80068ee:	6022      	str	r2, [r4, #0]
 80068f0:	2000      	movs	r0, #0
 80068f2:	e7db      	b.n	80068ac <__ssputs_r+0x58>
 80068f4:	462a      	mov	r2, r5
 80068f6:	f000 fb61 	bl	8006fbc <_realloc_r>
 80068fa:	4606      	mov	r6, r0
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d1e1      	bne.n	80068c4 <__ssputs_r+0x70>
 8006900:	6921      	ldr	r1, [r4, #16]
 8006902:	4650      	mov	r0, sl
 8006904:	f000 fab0 	bl	8006e68 <_free_r>
 8006908:	e7c7      	b.n	800689a <__ssputs_r+0x46>
	...

0800690c <_svfiprintf_r>:
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	4698      	mov	r8, r3
 8006912:	898b      	ldrh	r3, [r1, #12]
 8006914:	061b      	lsls	r3, r3, #24
 8006916:	b09d      	sub	sp, #116	; 0x74
 8006918:	4607      	mov	r7, r0
 800691a:	460d      	mov	r5, r1
 800691c:	4614      	mov	r4, r2
 800691e:	d50e      	bpl.n	800693e <_svfiprintf_r+0x32>
 8006920:	690b      	ldr	r3, [r1, #16]
 8006922:	b963      	cbnz	r3, 800693e <_svfiprintf_r+0x32>
 8006924:	2140      	movs	r1, #64	; 0x40
 8006926:	f000 faef 	bl	8006f08 <_malloc_r>
 800692a:	6028      	str	r0, [r5, #0]
 800692c:	6128      	str	r0, [r5, #16]
 800692e:	b920      	cbnz	r0, 800693a <_svfiprintf_r+0x2e>
 8006930:	230c      	movs	r3, #12
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	e0d1      	b.n	8006ade <_svfiprintf_r+0x1d2>
 800693a:	2340      	movs	r3, #64	; 0x40
 800693c:	616b      	str	r3, [r5, #20]
 800693e:	2300      	movs	r3, #0
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	2320      	movs	r3, #32
 8006944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006948:	f8cd 800c 	str.w	r8, [sp, #12]
 800694c:	2330      	movs	r3, #48	; 0x30
 800694e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006af8 <_svfiprintf_r+0x1ec>
 8006952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006956:	f04f 0901 	mov.w	r9, #1
 800695a:	4623      	mov	r3, r4
 800695c:	469a      	mov	sl, r3
 800695e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006962:	b10a      	cbz	r2, 8006968 <_svfiprintf_r+0x5c>
 8006964:	2a25      	cmp	r2, #37	; 0x25
 8006966:	d1f9      	bne.n	800695c <_svfiprintf_r+0x50>
 8006968:	ebba 0b04 	subs.w	fp, sl, r4
 800696c:	d00b      	beq.n	8006986 <_svfiprintf_r+0x7a>
 800696e:	465b      	mov	r3, fp
 8006970:	4622      	mov	r2, r4
 8006972:	4629      	mov	r1, r5
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ff6d 	bl	8006854 <__ssputs_r>
 800697a:	3001      	adds	r0, #1
 800697c:	f000 80aa 	beq.w	8006ad4 <_svfiprintf_r+0x1c8>
 8006980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006982:	445a      	add	r2, fp
 8006984:	9209      	str	r2, [sp, #36]	; 0x24
 8006986:	f89a 3000 	ldrb.w	r3, [sl]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80a2 	beq.w	8006ad4 <_svfiprintf_r+0x1c8>
 8006990:	2300      	movs	r3, #0
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800699a:	f10a 0a01 	add.w	sl, sl, #1
 800699e:	9304      	str	r3, [sp, #16]
 80069a0:	9307      	str	r3, [sp, #28]
 80069a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069a6:	931a      	str	r3, [sp, #104]	; 0x68
 80069a8:	4654      	mov	r4, sl
 80069aa:	2205      	movs	r2, #5
 80069ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b0:	4851      	ldr	r0, [pc, #324]	; (8006af8 <_svfiprintf_r+0x1ec>)
 80069b2:	f7f9 fc1d 	bl	80001f0 <memchr>
 80069b6:	9a04      	ldr	r2, [sp, #16]
 80069b8:	b9d8      	cbnz	r0, 80069f2 <_svfiprintf_r+0xe6>
 80069ba:	06d0      	lsls	r0, r2, #27
 80069bc:	bf44      	itt	mi
 80069be:	2320      	movmi	r3, #32
 80069c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c4:	0711      	lsls	r1, r2, #28
 80069c6:	bf44      	itt	mi
 80069c8:	232b      	movmi	r3, #43	; 0x2b
 80069ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ce:	f89a 3000 	ldrb.w	r3, [sl]
 80069d2:	2b2a      	cmp	r3, #42	; 0x2a
 80069d4:	d015      	beq.n	8006a02 <_svfiprintf_r+0xf6>
 80069d6:	9a07      	ldr	r2, [sp, #28]
 80069d8:	4654      	mov	r4, sl
 80069da:	2000      	movs	r0, #0
 80069dc:	f04f 0c0a 	mov.w	ip, #10
 80069e0:	4621      	mov	r1, r4
 80069e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069e6:	3b30      	subs	r3, #48	; 0x30
 80069e8:	2b09      	cmp	r3, #9
 80069ea:	d94e      	bls.n	8006a8a <_svfiprintf_r+0x17e>
 80069ec:	b1b0      	cbz	r0, 8006a1c <_svfiprintf_r+0x110>
 80069ee:	9207      	str	r2, [sp, #28]
 80069f0:	e014      	b.n	8006a1c <_svfiprintf_r+0x110>
 80069f2:	eba0 0308 	sub.w	r3, r0, r8
 80069f6:	fa09 f303 	lsl.w	r3, r9, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	46a2      	mov	sl, r4
 8006a00:	e7d2      	b.n	80069a8 <_svfiprintf_r+0x9c>
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	1d19      	adds	r1, r3, #4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	9103      	str	r1, [sp, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bfbb      	ittet	lt
 8006a0e:	425b      	neglt	r3, r3
 8006a10:	f042 0202 	orrlt.w	r2, r2, #2
 8006a14:	9307      	strge	r3, [sp, #28]
 8006a16:	9307      	strlt	r3, [sp, #28]
 8006a18:	bfb8      	it	lt
 8006a1a:	9204      	strlt	r2, [sp, #16]
 8006a1c:	7823      	ldrb	r3, [r4, #0]
 8006a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a20:	d10c      	bne.n	8006a3c <_svfiprintf_r+0x130>
 8006a22:	7863      	ldrb	r3, [r4, #1]
 8006a24:	2b2a      	cmp	r3, #42	; 0x2a
 8006a26:	d135      	bne.n	8006a94 <_svfiprintf_r+0x188>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	9203      	str	r2, [sp, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bfb8      	it	lt
 8006a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a38:	3402      	adds	r4, #2
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b08 <_svfiprintf_r+0x1fc>
 8006a40:	7821      	ldrb	r1, [r4, #0]
 8006a42:	2203      	movs	r2, #3
 8006a44:	4650      	mov	r0, sl
 8006a46:	f7f9 fbd3 	bl	80001f0 <memchr>
 8006a4a:	b140      	cbz	r0, 8006a5e <_svfiprintf_r+0x152>
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	eba0 000a 	sub.w	r0, r0, sl
 8006a52:	fa03 f000 	lsl.w	r0, r3, r0
 8006a56:	9b04      	ldr	r3, [sp, #16]
 8006a58:	4303      	orrs	r3, r0
 8006a5a:	3401      	adds	r4, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4826      	ldr	r0, [pc, #152]	; (8006afc <_svfiprintf_r+0x1f0>)
 8006a64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a68:	2206      	movs	r2, #6
 8006a6a:	f7f9 fbc1 	bl	80001f0 <memchr>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d038      	beq.n	8006ae4 <_svfiprintf_r+0x1d8>
 8006a72:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <_svfiprintf_r+0x1f4>)
 8006a74:	bb1b      	cbnz	r3, 8006abe <_svfiprintf_r+0x1b2>
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	3307      	adds	r3, #7
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	3308      	adds	r3, #8
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a84:	4433      	add	r3, r6
 8006a86:	9309      	str	r3, [sp, #36]	; 0x24
 8006a88:	e767      	b.n	800695a <_svfiprintf_r+0x4e>
 8006a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a8e:	460c      	mov	r4, r1
 8006a90:	2001      	movs	r0, #1
 8006a92:	e7a5      	b.n	80069e0 <_svfiprintf_r+0xd4>
 8006a94:	2300      	movs	r3, #0
 8006a96:	3401      	adds	r4, #1
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f04f 0c0a 	mov.w	ip, #10
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aa6:	3a30      	subs	r2, #48	; 0x30
 8006aa8:	2a09      	cmp	r2, #9
 8006aaa:	d903      	bls.n	8006ab4 <_svfiprintf_r+0x1a8>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0c5      	beq.n	8006a3c <_svfiprintf_r+0x130>
 8006ab0:	9105      	str	r1, [sp, #20]
 8006ab2:	e7c3      	b.n	8006a3c <_svfiprintf_r+0x130>
 8006ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab8:	4604      	mov	r4, r0
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7f0      	b.n	8006aa0 <_svfiprintf_r+0x194>
 8006abe:	ab03      	add	r3, sp, #12
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <_svfiprintf_r+0x1f8>)
 8006ac6:	a904      	add	r1, sp, #16
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f3af 8000 	nop.w
 8006ace:	1c42      	adds	r2, r0, #1
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	d1d6      	bne.n	8006a82 <_svfiprintf_r+0x176>
 8006ad4:	89ab      	ldrh	r3, [r5, #12]
 8006ad6:	065b      	lsls	r3, r3, #25
 8006ad8:	f53f af2c 	bmi.w	8006934 <_svfiprintf_r+0x28>
 8006adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ade:	b01d      	add	sp, #116	; 0x74
 8006ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae4:	ab03      	add	r3, sp, #12
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <_svfiprintf_r+0x1f8>)
 8006aec:	a904      	add	r1, sp, #16
 8006aee:	4638      	mov	r0, r7
 8006af0:	f000 f87a 	bl	8006be8 <_printf_i>
 8006af4:	e7eb      	b.n	8006ace <_svfiprintf_r+0x1c2>
 8006af6:	bf00      	nop
 8006af8:	080072b8 	.word	0x080072b8
 8006afc:	080072c2 	.word	0x080072c2
 8006b00:	00000000 	.word	0x00000000
 8006b04:	08006855 	.word	0x08006855
 8006b08:	080072be 	.word	0x080072be

08006b0c <_printf_common>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	4616      	mov	r6, r2
 8006b12:	4699      	mov	r9, r3
 8006b14:	688a      	ldr	r2, [r1, #8]
 8006b16:	690b      	ldr	r3, [r1, #16]
 8006b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	bfb8      	it	lt
 8006b20:	4613      	movlt	r3, r2
 8006b22:	6033      	str	r3, [r6, #0]
 8006b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b28:	4607      	mov	r7, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	b10a      	cbz	r2, 8006b32 <_printf_common+0x26>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	0699      	lsls	r1, r3, #26
 8006b36:	bf42      	ittt	mi
 8006b38:	6833      	ldrmi	r3, [r6, #0]
 8006b3a:	3302      	addmi	r3, #2
 8006b3c:	6033      	strmi	r3, [r6, #0]
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	f015 0506 	ands.w	r5, r5, #6
 8006b44:	d106      	bne.n	8006b54 <_printf_common+0x48>
 8006b46:	f104 0a19 	add.w	sl, r4, #25
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	6832      	ldr	r2, [r6, #0]
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	dc26      	bgt.n	8006ba2 <_printf_common+0x96>
 8006b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b58:	1e13      	subs	r3, r2, #0
 8006b5a:	6822      	ldr	r2, [r4, #0]
 8006b5c:	bf18      	it	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	0692      	lsls	r2, r2, #26
 8006b62:	d42b      	bmi.n	8006bbc <_printf_common+0xb0>
 8006b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b68:	4649      	mov	r1, r9
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	47c0      	blx	r8
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d01e      	beq.n	8006bb0 <_printf_common+0xa4>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	68e5      	ldr	r5, [r4, #12]
 8006b76:	6832      	ldr	r2, [r6, #0]
 8006b78:	f003 0306 	and.w	r3, r3, #6
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	bf08      	it	eq
 8006b80:	1aad      	subeq	r5, r5, r2
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	6922      	ldr	r2, [r4, #16]
 8006b86:	bf0c      	ite	eq
 8006b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b8c:	2500      	movne	r5, #0
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bfc4      	itt	gt
 8006b92:	1a9b      	subgt	r3, r3, r2
 8006b94:	18ed      	addgt	r5, r5, r3
 8006b96:	2600      	movs	r6, #0
 8006b98:	341a      	adds	r4, #26
 8006b9a:	42b5      	cmp	r5, r6
 8006b9c:	d11a      	bne.n	8006bd4 <_printf_common+0xc8>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e008      	b.n	8006bb4 <_printf_common+0xa8>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4652      	mov	r2, sl
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	4638      	mov	r0, r7
 8006baa:	47c0      	blx	r8
 8006bac:	3001      	adds	r0, #1
 8006bae:	d103      	bne.n	8006bb8 <_printf_common+0xac>
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb8:	3501      	adds	r5, #1
 8006bba:	e7c6      	b.n	8006b4a <_printf_common+0x3e>
 8006bbc:	18e1      	adds	r1, r4, r3
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	2030      	movs	r0, #48	; 0x30
 8006bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bc6:	4422      	add	r2, r4
 8006bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	e7c7      	b.n	8006b64 <_printf_common+0x58>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	4649      	mov	r1, r9
 8006bda:	4638      	mov	r0, r7
 8006bdc:	47c0      	blx	r8
 8006bde:	3001      	adds	r0, #1
 8006be0:	d0e6      	beq.n	8006bb0 <_printf_common+0xa4>
 8006be2:	3601      	adds	r6, #1
 8006be4:	e7d9      	b.n	8006b9a <_printf_common+0x8e>
	...

08006be8 <_printf_i>:
 8006be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	4691      	mov	r9, r2
 8006bf0:	7e27      	ldrb	r7, [r4, #24]
 8006bf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bf4:	2f78      	cmp	r7, #120	; 0x78
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	469a      	mov	sl, r3
 8006bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bfe:	d807      	bhi.n	8006c10 <_printf_i+0x28>
 8006c00:	2f62      	cmp	r7, #98	; 0x62
 8006c02:	d80a      	bhi.n	8006c1a <_printf_i+0x32>
 8006c04:	2f00      	cmp	r7, #0
 8006c06:	f000 80d8 	beq.w	8006dba <_printf_i+0x1d2>
 8006c0a:	2f58      	cmp	r7, #88	; 0x58
 8006c0c:	f000 80a3 	beq.w	8006d56 <_printf_i+0x16e>
 8006c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c18:	e03a      	b.n	8006c90 <_printf_i+0xa8>
 8006c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c1e:	2b15      	cmp	r3, #21
 8006c20:	d8f6      	bhi.n	8006c10 <_printf_i+0x28>
 8006c22:	a001      	add	r0, pc, #4	; (adr r0, 8006c28 <_printf_i+0x40>)
 8006c24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c95 	.word	0x08006c95
 8006c30:	08006c11 	.word	0x08006c11
 8006c34:	08006c11 	.word	0x08006c11
 8006c38:	08006c11 	.word	0x08006c11
 8006c3c:	08006c11 	.word	0x08006c11
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006c11 	.word	0x08006c11
 8006c48:	08006c11 	.word	0x08006c11
 8006c4c:	08006c11 	.word	0x08006c11
 8006c50:	08006c11 	.word	0x08006c11
 8006c54:	08006da1 	.word	0x08006da1
 8006c58:	08006cc5 	.word	0x08006cc5
 8006c5c:	08006d83 	.word	0x08006d83
 8006c60:	08006c11 	.word	0x08006c11
 8006c64:	08006c11 	.word	0x08006c11
 8006c68:	08006dc3 	.word	0x08006dc3
 8006c6c:	08006c11 	.word	0x08006c11
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006c11 	.word	0x08006c11
 8006c78:	08006c11 	.word	0x08006c11
 8006c7c:	08006d8b 	.word	0x08006d8b
 8006c80:	680b      	ldr	r3, [r1, #0]
 8006c82:	1d1a      	adds	r2, r3, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	600a      	str	r2, [r1, #0]
 8006c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0a3      	b.n	8006ddc <_printf_i+0x1f4>
 8006c94:	6825      	ldr	r5, [r4, #0]
 8006c96:	6808      	ldr	r0, [r1, #0]
 8006c98:	062e      	lsls	r6, r5, #24
 8006c9a:	f100 0304 	add.w	r3, r0, #4
 8006c9e:	d50a      	bpl.n	8006cb6 <_printf_i+0xce>
 8006ca0:	6805      	ldr	r5, [r0, #0]
 8006ca2:	600b      	str	r3, [r1, #0]
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	da03      	bge.n	8006cb0 <_printf_i+0xc8>
 8006ca8:	232d      	movs	r3, #45	; 0x2d
 8006caa:	426d      	negs	r5, r5
 8006cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb0:	485e      	ldr	r0, [pc, #376]	; (8006e2c <_printf_i+0x244>)
 8006cb2:	230a      	movs	r3, #10
 8006cb4:	e019      	b.n	8006cea <_printf_i+0x102>
 8006cb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cba:	6805      	ldr	r5, [r0, #0]
 8006cbc:	600b      	str	r3, [r1, #0]
 8006cbe:	bf18      	it	ne
 8006cc0:	b22d      	sxthne	r5, r5
 8006cc2:	e7ef      	b.n	8006ca4 <_printf_i+0xbc>
 8006cc4:	680b      	ldr	r3, [r1, #0]
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	1d18      	adds	r0, r3, #4
 8006cca:	6008      	str	r0, [r1, #0]
 8006ccc:	0628      	lsls	r0, r5, #24
 8006cce:	d501      	bpl.n	8006cd4 <_printf_i+0xec>
 8006cd0:	681d      	ldr	r5, [r3, #0]
 8006cd2:	e002      	b.n	8006cda <_printf_i+0xf2>
 8006cd4:	0669      	lsls	r1, r5, #25
 8006cd6:	d5fb      	bpl.n	8006cd0 <_printf_i+0xe8>
 8006cd8:	881d      	ldrh	r5, [r3, #0]
 8006cda:	4854      	ldr	r0, [pc, #336]	; (8006e2c <_printf_i+0x244>)
 8006cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cde:	bf0c      	ite	eq
 8006ce0:	2308      	moveq	r3, #8
 8006ce2:	230a      	movne	r3, #10
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cea:	6866      	ldr	r6, [r4, #4]
 8006cec:	60a6      	str	r6, [r4, #8]
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	bfa2      	ittt	ge
 8006cf2:	6821      	ldrge	r1, [r4, #0]
 8006cf4:	f021 0104 	bicge.w	r1, r1, #4
 8006cf8:	6021      	strge	r1, [r4, #0]
 8006cfa:	b90d      	cbnz	r5, 8006d00 <_printf_i+0x118>
 8006cfc:	2e00      	cmp	r6, #0
 8006cfe:	d04d      	beq.n	8006d9c <_printf_i+0x1b4>
 8006d00:	4616      	mov	r6, r2
 8006d02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d06:	fb03 5711 	mls	r7, r3, r1, r5
 8006d0a:	5dc7      	ldrb	r7, [r0, r7]
 8006d0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d10:	462f      	mov	r7, r5
 8006d12:	42bb      	cmp	r3, r7
 8006d14:	460d      	mov	r5, r1
 8006d16:	d9f4      	bls.n	8006d02 <_printf_i+0x11a>
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d10b      	bne.n	8006d34 <_printf_i+0x14c>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	07df      	lsls	r7, r3, #31
 8006d20:	d508      	bpl.n	8006d34 <_printf_i+0x14c>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	6861      	ldr	r1, [r4, #4]
 8006d26:	4299      	cmp	r1, r3
 8006d28:	bfde      	ittt	le
 8006d2a:	2330      	movle	r3, #48	; 0x30
 8006d2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d34:	1b92      	subs	r2, r2, r6
 8006d36:	6122      	str	r2, [r4, #16]
 8006d38:	f8cd a000 	str.w	sl, [sp]
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	aa03      	add	r2, sp, #12
 8006d40:	4621      	mov	r1, r4
 8006d42:	4640      	mov	r0, r8
 8006d44:	f7ff fee2 	bl	8006b0c <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d14c      	bne.n	8006de6 <_printf_i+0x1fe>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	b004      	add	sp, #16
 8006d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d56:	4835      	ldr	r0, [pc, #212]	; (8006e2c <_printf_i+0x244>)
 8006d58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	680e      	ldr	r6, [r1, #0]
 8006d60:	061f      	lsls	r7, r3, #24
 8006d62:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d66:	600e      	str	r6, [r1, #0]
 8006d68:	d514      	bpl.n	8006d94 <_printf_i+0x1ac>
 8006d6a:	07d9      	lsls	r1, r3, #31
 8006d6c:	bf44      	itt	mi
 8006d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d72:	6023      	strmi	r3, [r4, #0]
 8006d74:	b91d      	cbnz	r5, 8006d7e <_printf_i+0x196>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	f023 0320 	bic.w	r3, r3, #32
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	2310      	movs	r3, #16
 8006d80:	e7b0      	b.n	8006ce4 <_printf_i+0xfc>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	f043 0320 	orr.w	r3, r3, #32
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	2378      	movs	r3, #120	; 0x78
 8006d8c:	4828      	ldr	r0, [pc, #160]	; (8006e30 <_printf_i+0x248>)
 8006d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d92:	e7e3      	b.n	8006d5c <_printf_i+0x174>
 8006d94:	065e      	lsls	r6, r3, #25
 8006d96:	bf48      	it	mi
 8006d98:	b2ad      	uxthmi	r5, r5
 8006d9a:	e7e6      	b.n	8006d6a <_printf_i+0x182>
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	e7bb      	b.n	8006d18 <_printf_i+0x130>
 8006da0:	680b      	ldr	r3, [r1, #0]
 8006da2:	6826      	ldr	r6, [r4, #0]
 8006da4:	6960      	ldr	r0, [r4, #20]
 8006da6:	1d1d      	adds	r5, r3, #4
 8006da8:	600d      	str	r5, [r1, #0]
 8006daa:	0635      	lsls	r5, r6, #24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	d501      	bpl.n	8006db4 <_printf_i+0x1cc>
 8006db0:	6018      	str	r0, [r3, #0]
 8006db2:	e002      	b.n	8006dba <_printf_i+0x1d2>
 8006db4:	0671      	lsls	r1, r6, #25
 8006db6:	d5fb      	bpl.n	8006db0 <_printf_i+0x1c8>
 8006db8:	8018      	strh	r0, [r3, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	4616      	mov	r6, r2
 8006dc0:	e7ba      	b.n	8006d38 <_printf_i+0x150>
 8006dc2:	680b      	ldr	r3, [r1, #0]
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	600a      	str	r2, [r1, #0]
 8006dc8:	681e      	ldr	r6, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7f9 fa0e 	bl	80001f0 <memchr>
 8006dd4:	b108      	cbz	r0, 8006dda <_printf_i+0x1f2>
 8006dd6:	1b80      	subs	r0, r0, r6
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	2300      	movs	r3, #0
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de4:	e7a8      	b.n	8006d38 <_printf_i+0x150>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	4632      	mov	r2, r6
 8006dea:	4649      	mov	r1, r9
 8006dec:	4640      	mov	r0, r8
 8006dee:	47d0      	blx	sl
 8006df0:	3001      	adds	r0, #1
 8006df2:	d0ab      	beq.n	8006d4c <_printf_i+0x164>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	079b      	lsls	r3, r3, #30
 8006df8:	d413      	bmi.n	8006e22 <_printf_i+0x23a>
 8006dfa:	68e0      	ldr	r0, [r4, #12]
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	4298      	cmp	r0, r3
 8006e00:	bfb8      	it	lt
 8006e02:	4618      	movlt	r0, r3
 8006e04:	e7a4      	b.n	8006d50 <_printf_i+0x168>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	47d0      	blx	sl
 8006e10:	3001      	adds	r0, #1
 8006e12:	d09b      	beq.n	8006d4c <_printf_i+0x164>
 8006e14:	3501      	adds	r5, #1
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	9903      	ldr	r1, [sp, #12]
 8006e1a:	1a5b      	subs	r3, r3, r1
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dcf2      	bgt.n	8006e06 <_printf_i+0x21e>
 8006e20:	e7eb      	b.n	8006dfa <_printf_i+0x212>
 8006e22:	2500      	movs	r5, #0
 8006e24:	f104 0619 	add.w	r6, r4, #25
 8006e28:	e7f5      	b.n	8006e16 <_printf_i+0x22e>
 8006e2a:	bf00      	nop
 8006e2c:	080072c9 	.word	0x080072c9
 8006e30:	080072da 	.word	0x080072da

08006e34 <memmove>:
 8006e34:	4288      	cmp	r0, r1
 8006e36:	b510      	push	{r4, lr}
 8006e38:	eb01 0402 	add.w	r4, r1, r2
 8006e3c:	d902      	bls.n	8006e44 <memmove+0x10>
 8006e3e:	4284      	cmp	r4, r0
 8006e40:	4623      	mov	r3, r4
 8006e42:	d807      	bhi.n	8006e54 <memmove+0x20>
 8006e44:	1e43      	subs	r3, r0, #1
 8006e46:	42a1      	cmp	r1, r4
 8006e48:	d008      	beq.n	8006e5c <memmove+0x28>
 8006e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e52:	e7f8      	b.n	8006e46 <memmove+0x12>
 8006e54:	4402      	add	r2, r0
 8006e56:	4601      	mov	r1, r0
 8006e58:	428a      	cmp	r2, r1
 8006e5a:	d100      	bne.n	8006e5e <memmove+0x2a>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e66:	e7f7      	b.n	8006e58 <memmove+0x24>

08006e68 <_free_r>:
 8006e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d048      	beq.n	8006f00 <_free_r+0x98>
 8006e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e72:	9001      	str	r0, [sp, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f1a1 0404 	sub.w	r4, r1, #4
 8006e7a:	bfb8      	it	lt
 8006e7c:	18e4      	addlt	r4, r4, r3
 8006e7e:	f000 f8d3 	bl	8007028 <__malloc_lock>
 8006e82:	4a20      	ldr	r2, [pc, #128]	; (8006f04 <_free_r+0x9c>)
 8006e84:	9801      	ldr	r0, [sp, #4]
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	4615      	mov	r5, r2
 8006e8a:	b933      	cbnz	r3, 8006e9a <_free_r+0x32>
 8006e8c:	6063      	str	r3, [r4, #4]
 8006e8e:	6014      	str	r4, [r2, #0]
 8006e90:	b003      	add	sp, #12
 8006e92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e96:	f000 b8cd 	b.w	8007034 <__malloc_unlock>
 8006e9a:	42a3      	cmp	r3, r4
 8006e9c:	d90b      	bls.n	8006eb6 <_free_r+0x4e>
 8006e9e:	6821      	ldr	r1, [r4, #0]
 8006ea0:	1862      	adds	r2, r4, r1
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	bf04      	itt	eq
 8006ea6:	681a      	ldreq	r2, [r3, #0]
 8006ea8:	685b      	ldreq	r3, [r3, #4]
 8006eaa:	6063      	str	r3, [r4, #4]
 8006eac:	bf04      	itt	eq
 8006eae:	1852      	addeq	r2, r2, r1
 8006eb0:	6022      	streq	r2, [r4, #0]
 8006eb2:	602c      	str	r4, [r5, #0]
 8006eb4:	e7ec      	b.n	8006e90 <_free_r+0x28>
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	b10b      	cbz	r3, 8006ec0 <_free_r+0x58>
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	d9fa      	bls.n	8006eb6 <_free_r+0x4e>
 8006ec0:	6811      	ldr	r1, [r2, #0]
 8006ec2:	1855      	adds	r5, r2, r1
 8006ec4:	42a5      	cmp	r5, r4
 8006ec6:	d10b      	bne.n	8006ee0 <_free_r+0x78>
 8006ec8:	6824      	ldr	r4, [r4, #0]
 8006eca:	4421      	add	r1, r4
 8006ecc:	1854      	adds	r4, r2, r1
 8006ece:	42a3      	cmp	r3, r4
 8006ed0:	6011      	str	r1, [r2, #0]
 8006ed2:	d1dd      	bne.n	8006e90 <_free_r+0x28>
 8006ed4:	681c      	ldr	r4, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	6053      	str	r3, [r2, #4]
 8006eda:	4421      	add	r1, r4
 8006edc:	6011      	str	r1, [r2, #0]
 8006ede:	e7d7      	b.n	8006e90 <_free_r+0x28>
 8006ee0:	d902      	bls.n	8006ee8 <_free_r+0x80>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	6003      	str	r3, [r0, #0]
 8006ee6:	e7d3      	b.n	8006e90 <_free_r+0x28>
 8006ee8:	6825      	ldr	r5, [r4, #0]
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	428b      	cmp	r3, r1
 8006eee:	bf04      	itt	eq
 8006ef0:	6819      	ldreq	r1, [r3, #0]
 8006ef2:	685b      	ldreq	r3, [r3, #4]
 8006ef4:	6063      	str	r3, [r4, #4]
 8006ef6:	bf04      	itt	eq
 8006ef8:	1949      	addeq	r1, r1, r5
 8006efa:	6021      	streq	r1, [r4, #0]
 8006efc:	6054      	str	r4, [r2, #4]
 8006efe:	e7c7      	b.n	8006e90 <_free_r+0x28>
 8006f00:	b003      	add	sp, #12
 8006f02:	bd30      	pop	{r4, r5, pc}
 8006f04:	20000138 	.word	0x20000138

08006f08 <_malloc_r>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	1ccd      	adds	r5, r1, #3
 8006f0c:	f025 0503 	bic.w	r5, r5, #3
 8006f10:	3508      	adds	r5, #8
 8006f12:	2d0c      	cmp	r5, #12
 8006f14:	bf38      	it	cc
 8006f16:	250c      	movcc	r5, #12
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	db01      	blt.n	8006f22 <_malloc_r+0x1a>
 8006f1e:	42a9      	cmp	r1, r5
 8006f20:	d903      	bls.n	8006f2a <_malloc_r+0x22>
 8006f22:	230c      	movs	r3, #12
 8006f24:	6033      	str	r3, [r6, #0]
 8006f26:	2000      	movs	r0, #0
 8006f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2a:	f000 f87d 	bl	8007028 <__malloc_lock>
 8006f2e:	4921      	ldr	r1, [pc, #132]	; (8006fb4 <_malloc_r+0xac>)
 8006f30:	680a      	ldr	r2, [r1, #0]
 8006f32:	4614      	mov	r4, r2
 8006f34:	b99c      	cbnz	r4, 8006f5e <_malloc_r+0x56>
 8006f36:	4f20      	ldr	r7, [pc, #128]	; (8006fb8 <_malloc_r+0xb0>)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	b923      	cbnz	r3, 8006f46 <_malloc_r+0x3e>
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f000 f862 	bl	8007008 <_sbrk_r>
 8006f44:	6038      	str	r0, [r7, #0]
 8006f46:	4629      	mov	r1, r5
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f000 f85d 	bl	8007008 <_sbrk_r>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	d123      	bne.n	8006f9a <_malloc_r+0x92>
 8006f52:	230c      	movs	r3, #12
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	4630      	mov	r0, r6
 8006f58:	f000 f86c 	bl	8007034 <__malloc_unlock>
 8006f5c:	e7e3      	b.n	8006f26 <_malloc_r+0x1e>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	1b5b      	subs	r3, r3, r5
 8006f62:	d417      	bmi.n	8006f94 <_malloc_r+0x8c>
 8006f64:	2b0b      	cmp	r3, #11
 8006f66:	d903      	bls.n	8006f70 <_malloc_r+0x68>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	441c      	add	r4, r3
 8006f6c:	6025      	str	r5, [r4, #0]
 8006f6e:	e004      	b.n	8006f7a <_malloc_r+0x72>
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	42a2      	cmp	r2, r4
 8006f74:	bf0c      	ite	eq
 8006f76:	600b      	streq	r3, [r1, #0]
 8006f78:	6053      	strne	r3, [r2, #4]
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f000 f85a 	bl	8007034 <__malloc_unlock>
 8006f80:	f104 000b 	add.w	r0, r4, #11
 8006f84:	1d23      	adds	r3, r4, #4
 8006f86:	f020 0007 	bic.w	r0, r0, #7
 8006f8a:	1ac2      	subs	r2, r0, r3
 8006f8c:	d0cc      	beq.n	8006f28 <_malloc_r+0x20>
 8006f8e:	1a1b      	subs	r3, r3, r0
 8006f90:	50a3      	str	r3, [r4, r2]
 8006f92:	e7c9      	b.n	8006f28 <_malloc_r+0x20>
 8006f94:	4622      	mov	r2, r4
 8006f96:	6864      	ldr	r4, [r4, #4]
 8006f98:	e7cc      	b.n	8006f34 <_malloc_r+0x2c>
 8006f9a:	1cc4      	adds	r4, r0, #3
 8006f9c:	f024 0403 	bic.w	r4, r4, #3
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d0e3      	beq.n	8006f6c <_malloc_r+0x64>
 8006fa4:	1a21      	subs	r1, r4, r0
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f000 f82e 	bl	8007008 <_sbrk_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d1dd      	bne.n	8006f6c <_malloc_r+0x64>
 8006fb0:	e7cf      	b.n	8006f52 <_malloc_r+0x4a>
 8006fb2:	bf00      	nop
 8006fb4:	20000138 	.word	0x20000138
 8006fb8:	2000013c 	.word	0x2000013c

08006fbc <_realloc_r>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	460e      	mov	r6, r1
 8006fc4:	b921      	cbnz	r1, 8006fd0 <_realloc_r+0x14>
 8006fc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006fca:	4611      	mov	r1, r2
 8006fcc:	f7ff bf9c 	b.w	8006f08 <_malloc_r>
 8006fd0:	b922      	cbnz	r2, 8006fdc <_realloc_r+0x20>
 8006fd2:	f7ff ff49 	bl	8006e68 <_free_r>
 8006fd6:	4625      	mov	r5, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fdc:	f000 f830 	bl	8007040 <_malloc_usable_size_r>
 8006fe0:	42a0      	cmp	r0, r4
 8006fe2:	d20f      	bcs.n	8007004 <_realloc_r+0x48>
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f7ff ff8e 	bl	8006f08 <_malloc_r>
 8006fec:	4605      	mov	r5, r0
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d0f2      	beq.n	8006fd8 <_realloc_r+0x1c>
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	f7ff fbf7 	bl	80067e8 <memcpy>
 8006ffa:	4631      	mov	r1, r6
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	f7ff ff33 	bl	8006e68 <_free_r>
 8007002:	e7e9      	b.n	8006fd8 <_realloc_r+0x1c>
 8007004:	4635      	mov	r5, r6
 8007006:	e7e7      	b.n	8006fd8 <_realloc_r+0x1c>

08007008 <_sbrk_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d06      	ldr	r5, [pc, #24]	; (8007024 <_sbrk_r+0x1c>)
 800700c:	2300      	movs	r3, #0
 800700e:	4604      	mov	r4, r0
 8007010:	4608      	mov	r0, r1
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	f7fb fb7a 	bl	800270c <_sbrk>
 8007018:	1c43      	adds	r3, r0, #1
 800701a:	d102      	bne.n	8007022 <_sbrk_r+0x1a>
 800701c:	682b      	ldr	r3, [r5, #0]
 800701e:	b103      	cbz	r3, 8007022 <_sbrk_r+0x1a>
 8007020:	6023      	str	r3, [r4, #0]
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	20000318 	.word	0x20000318

08007028 <__malloc_lock>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__malloc_lock+0x8>)
 800702a:	f000 b811 	b.w	8007050 <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	20000320 	.word	0x20000320

08007034 <__malloc_unlock>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__malloc_unlock+0x8>)
 8007036:	f000 b80c 	b.w	8007052 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	20000320 	.word	0x20000320

08007040 <_malloc_usable_size_r>:
 8007040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007044:	1f18      	subs	r0, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	bfbc      	itt	lt
 800704a:	580b      	ldrlt	r3, [r1, r0]
 800704c:	18c0      	addlt	r0, r0, r3
 800704e:	4770      	bx	lr

08007050 <__retarget_lock_acquire_recursive>:
 8007050:	4770      	bx	lr

08007052 <__retarget_lock_release_recursive>:
 8007052:	4770      	bx	lr

08007054 <_init>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	bf00      	nop
 8007058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705a:	bc08      	pop	{r3}
 800705c:	469e      	mov	lr, r3
 800705e:	4770      	bx	lr

08007060 <_fini>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	bf00      	nop
 8007064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007066:	bc08      	pop	{r3}
 8007068:	469e      	mov	lr, r3
 800706a:	4770      	bx	lr
